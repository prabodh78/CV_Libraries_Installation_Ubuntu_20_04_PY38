// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_INCLUDED_caffe_2eproto
#define PROTOBUF_INCLUDED_caffe_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_caffe_2eproto 

namespace protobuf_caffe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[58];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_caffe_2eproto
namespace caffe {
class AccuracyParameter;
class AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class AdaptiveBiasChannelParameter;
class AdaptiveBiasChannelParameterDefaultTypeInternal;
extern AdaptiveBiasChannelParameterDefaultTypeInternal _AdaptiveBiasChannelParameter_default_instance_;
class ArgMaxParameter;
class ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BiasChannelParameter;
class BiasChannelParameterDefaultTypeInternal;
extern BiasChannelParameterDefaultTypeInternal _BiasChannelParameter_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
class BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class CensorLabelParameter;
class CensorLabelParameterDefaultTypeInternal;
extern CensorLabelParameterDefaultTypeInternal _CensorLabelParameter_default_instance_;
class ChannelAggregatorParameter;
class ChannelAggregatorParameterDefaultTypeInternal;
extern ChannelAggregatorParameterDefaultTypeInternal _ChannelAggregatorParameter_default_instance_;
class ConcatParameter;
class ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ContrastiveLossParameter;
class ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class DataParameter;
class DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DenseCRFParameter;
class DenseCRFParameterDefaultTypeInternal;
extern DenseCRFParameterDefaultTypeInternal _DenseCRFParameter_default_instance_;
class DominantChannelParameter;
class DominantChannelParameterDefaultTypeInternal;
extern DominantChannelParameterDefaultTypeInternal _DominantChannelParameter_default_instance_;
class DropoutParameter;
class DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
class DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class EltwiseParameter;
class EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EuclideanLossParameter;
class EuclideanLossParameterDefaultTypeInternal;
extern EuclideanLossParameterDefaultTypeInternal _EuclideanLossParameter_default_instance_;
class ExpParameter;
class ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class GainChannelParameter;
class GainChannelParameterDefaultTypeInternal;
extern GainChannelParameterDefaultTypeInternal _GainChannelParameter_default_instance_;
class HDF5DataParameter;
class HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
class HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
class HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class HistogramParameter;
class HistogramParameterDefaultTypeInternal;
extern HistogramParameterDefaultTypeInternal _HistogramParameter_default_instance_;
class IgnoreOverlayParameter;
class IgnoreOverlayParameterDefaultTypeInternal;
extern IgnoreOverlayParameterDefaultTypeInternal _IgnoreOverlayParameter_default_instance_;
class ImageDataParameter;
class ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfogainLossParameter;
class InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
class InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InterpParameter;
class InterpParameterDefaultTypeInternal;
extern InterpParameterDefaultTypeInternal _InterpParameter_default_instance_;
class LRNParameter;
class LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class MVNParameter;
class MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class MatReadParameter;
class MatReadParameterDefaultTypeInternal;
extern MatReadParameterDefaultTypeInternal _MatReadParameter_default_instance_;
class MatWriteParameter;
class MatWriteParameterDefaultTypeInternal;
extern MatWriteParameterDefaultTypeInternal _MatWriteParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
class NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class OneHotParameter;
class OneHotParameterDefaultTypeInternal;
extern OneHotParameterDefaultTypeInternal _OneHotParameter_default_instance_;
class PaddingParameter;
class PaddingParameterDefaultTypeInternal;
extern PaddingParameterDefaultTypeInternal _PaddingParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
class PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class ReLUParameter;
class ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class SegAccuracyParameter;
class SegAccuracyParameterDefaultTypeInternal;
extern SegAccuracyParameterDefaultTypeInternal _SegAccuracyParameter_default_instance_;
class SigmoidParameter;
class SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class SliceParameter;
class SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SoftmaxLossParameter;
class SoftmaxLossParameterDefaultTypeInternal;
extern SoftmaxLossParameterDefaultTypeInternal _SoftmaxLossParameter_default_instance_;
class SoftmaxParameter;
class SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class SolverParameter;
class SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class TanHParameter;
class TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
class ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TransformationParameter;
class TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class UniqueLabelParameter;
class UniqueLabelParameterDefaultTypeInternal;
extern UniqueLabelParameterDefaultTypeInternal _UniqueLabelParameter_default_instance_;
class V0LayerParameter;
class V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class WindowDataParameter;
class WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace caffe
namespace google {
namespace protobuf {
template<> ::caffe::AccuracyParameter* Arena::CreateMaybeMessage<::caffe::AccuracyParameter>(Arena*);
template<> ::caffe::AdaptiveBiasChannelParameter* Arena::CreateMaybeMessage<::caffe::AdaptiveBiasChannelParameter>(Arena*);
template<> ::caffe::ArgMaxParameter* Arena::CreateMaybeMessage<::caffe::ArgMaxParameter>(Arena*);
template<> ::caffe::BiasChannelParameter* Arena::CreateMaybeMessage<::caffe::BiasChannelParameter>(Arena*);
template<> ::caffe::BlobProto* Arena::CreateMaybeMessage<::caffe::BlobProto>(Arena*);
template<> ::caffe::BlobProtoVector* Arena::CreateMaybeMessage<::caffe::BlobProtoVector>(Arena*);
template<> ::caffe::CensorLabelParameter* Arena::CreateMaybeMessage<::caffe::CensorLabelParameter>(Arena*);
template<> ::caffe::ChannelAggregatorParameter* Arena::CreateMaybeMessage<::caffe::ChannelAggregatorParameter>(Arena*);
template<> ::caffe::ConcatParameter* Arena::CreateMaybeMessage<::caffe::ConcatParameter>(Arena*);
template<> ::caffe::ContrastiveLossParameter* Arena::CreateMaybeMessage<::caffe::ContrastiveLossParameter>(Arena*);
template<> ::caffe::ConvolutionParameter* Arena::CreateMaybeMessage<::caffe::ConvolutionParameter>(Arena*);
template<> ::caffe::DataParameter* Arena::CreateMaybeMessage<::caffe::DataParameter>(Arena*);
template<> ::caffe::Datum* Arena::CreateMaybeMessage<::caffe::Datum>(Arena*);
template<> ::caffe::DenseCRFParameter* Arena::CreateMaybeMessage<::caffe::DenseCRFParameter>(Arena*);
template<> ::caffe::DominantChannelParameter* Arena::CreateMaybeMessage<::caffe::DominantChannelParameter>(Arena*);
template<> ::caffe::DropoutParameter* Arena::CreateMaybeMessage<::caffe::DropoutParameter>(Arena*);
template<> ::caffe::DummyDataParameter* Arena::CreateMaybeMessage<::caffe::DummyDataParameter>(Arena*);
template<> ::caffe::EltwiseParameter* Arena::CreateMaybeMessage<::caffe::EltwiseParameter>(Arena*);
template<> ::caffe::EuclideanLossParameter* Arena::CreateMaybeMessage<::caffe::EuclideanLossParameter>(Arena*);
template<> ::caffe::ExpParameter* Arena::CreateMaybeMessage<::caffe::ExpParameter>(Arena*);
template<> ::caffe::FillerParameter* Arena::CreateMaybeMessage<::caffe::FillerParameter>(Arena*);
template<> ::caffe::GainChannelParameter* Arena::CreateMaybeMessage<::caffe::GainChannelParameter>(Arena*);
template<> ::caffe::HDF5DataParameter* Arena::CreateMaybeMessage<::caffe::HDF5DataParameter>(Arena*);
template<> ::caffe::HDF5OutputParameter* Arena::CreateMaybeMessage<::caffe::HDF5OutputParameter>(Arena*);
template<> ::caffe::HingeLossParameter* Arena::CreateMaybeMessage<::caffe::HingeLossParameter>(Arena*);
template<> ::caffe::HistogramParameter* Arena::CreateMaybeMessage<::caffe::HistogramParameter>(Arena*);
template<> ::caffe::IgnoreOverlayParameter* Arena::CreateMaybeMessage<::caffe::IgnoreOverlayParameter>(Arena*);
template<> ::caffe::ImageDataParameter* Arena::CreateMaybeMessage<::caffe::ImageDataParameter>(Arena*);
template<> ::caffe::InfogainLossParameter* Arena::CreateMaybeMessage<::caffe::InfogainLossParameter>(Arena*);
template<> ::caffe::InnerProductParameter* Arena::CreateMaybeMessage<::caffe::InnerProductParameter>(Arena*);
template<> ::caffe::InterpParameter* Arena::CreateMaybeMessage<::caffe::InterpParameter>(Arena*);
template<> ::caffe::LRNParameter* Arena::CreateMaybeMessage<::caffe::LRNParameter>(Arena*);
template<> ::caffe::LayerParameter* Arena::CreateMaybeMessage<::caffe::LayerParameter>(Arena*);
template<> ::caffe::MVNParameter* Arena::CreateMaybeMessage<::caffe::MVNParameter>(Arena*);
template<> ::caffe::MatReadParameter* Arena::CreateMaybeMessage<::caffe::MatReadParameter>(Arena*);
template<> ::caffe::MatWriteParameter* Arena::CreateMaybeMessage<::caffe::MatWriteParameter>(Arena*);
template<> ::caffe::MemoryDataParameter* Arena::CreateMaybeMessage<::caffe::MemoryDataParameter>(Arena*);
template<> ::caffe::NetParameter* Arena::CreateMaybeMessage<::caffe::NetParameter>(Arena*);
template<> ::caffe::NetState* Arena::CreateMaybeMessage<::caffe::NetState>(Arena*);
template<> ::caffe::NetStateRule* Arena::CreateMaybeMessage<::caffe::NetStateRule>(Arena*);
template<> ::caffe::OneHotParameter* Arena::CreateMaybeMessage<::caffe::OneHotParameter>(Arena*);
template<> ::caffe::PaddingParameter* Arena::CreateMaybeMessage<::caffe::PaddingParameter>(Arena*);
template<> ::caffe::PoolingParameter* Arena::CreateMaybeMessage<::caffe::PoolingParameter>(Arena*);
template<> ::caffe::PowerParameter* Arena::CreateMaybeMessage<::caffe::PowerParameter>(Arena*);
template<> ::caffe::ReLUParameter* Arena::CreateMaybeMessage<::caffe::ReLUParameter>(Arena*);
template<> ::caffe::SegAccuracyParameter* Arena::CreateMaybeMessage<::caffe::SegAccuracyParameter>(Arena*);
template<> ::caffe::SigmoidParameter* Arena::CreateMaybeMessage<::caffe::SigmoidParameter>(Arena*);
template<> ::caffe::SliceParameter* Arena::CreateMaybeMessage<::caffe::SliceParameter>(Arena*);
template<> ::caffe::SoftmaxLossParameter* Arena::CreateMaybeMessage<::caffe::SoftmaxLossParameter>(Arena*);
template<> ::caffe::SoftmaxParameter* Arena::CreateMaybeMessage<::caffe::SoftmaxParameter>(Arena*);
template<> ::caffe::SolverParameter* Arena::CreateMaybeMessage<::caffe::SolverParameter>(Arena*);
template<> ::caffe::SolverState* Arena::CreateMaybeMessage<::caffe::SolverState>(Arena*);
template<> ::caffe::TanHParameter* Arena::CreateMaybeMessage<::caffe::TanHParameter>(Arena*);
template<> ::caffe::ThresholdParameter* Arena::CreateMaybeMessage<::caffe::ThresholdParameter>(Arena*);
template<> ::caffe::TransformationParameter* Arena::CreateMaybeMessage<::caffe::TransformationParameter>(Arena*);
template<> ::caffe::UniqueLabelParameter* Arena::CreateMaybeMessage<::caffe::UniqueLabelParameter>(Arena*);
template<> ::caffe::V0LayerParameter* Arena::CreateMaybeMessage<::caffe::V0LayerParameter>(Arena*);
template<> ::caffe::WindowDataParameter* Arena::CreateMaybeMessage<::caffe::WindowDataParameter>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace caffe {

enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAGRAD;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum LayerParameter_LayerType {
  LayerParameter_LayerType_NONE = 0,
  LayerParameter_LayerType_ABSVAL = 35,
  LayerParameter_LayerType_ACCURACY = 1,
  LayerParameter_LayerType_ADAPTIVE_BIAS_CHANNEL = 50,
  LayerParameter_LayerType_ARGMAX = 30,
  LayerParameter_LayerType_BNLL = 2,
  LayerParameter_LayerType_BIAS_CHANNEL = 47,
  LayerParameter_LayerType_CENSOR_LABEL = 49,
  LayerParameter_LayerType_CHANNEL_AGGREGATOR = 51,
  LayerParameter_LayerType_CONCAT = 3,
  LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  LayerParameter_LayerType_CONVOLUTION = 4,
  LayerParameter_LayerType_DATA = 5,
  LayerParameter_LayerType_DENSE_CRF = 45,
  LayerParameter_LayerType_DOMINANT_CHANNEL = 46,
  LayerParameter_LayerType_DROPOUT = 6,
  LayerParameter_LayerType_DUMMY_DATA = 32,
  LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  LayerParameter_LayerType_ELTWISE = 25,
  LayerParameter_LayerType_EXP = 38,
  LayerParameter_LayerType_FLATTEN = 8,
  LayerParameter_LayerType_GAIN_CHANNEL = 55,
  LayerParameter_LayerType_HDF5_DATA = 9,
  LayerParameter_LayerType_HDF5_OUTPUT = 10,
  LayerParameter_LayerType_HINGE_LOSS = 28,
  LayerParameter_LayerType_HISTOGRAM = 53,
  LayerParameter_LayerType_IGNORE_OVERLAY = 52,
  LayerParameter_LayerType_IM2COL = 11,
  LayerParameter_LayerType_IMAGE_DATA = 12,
  LayerParameter_LayerType_IMAGE_SEG_DATA = 39,
  LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  LayerParameter_LayerType_INNER_PRODUCT = 14,
  LayerParameter_LayerType_INTERP = 41,
  LayerParameter_LayerType_LRN = 15,
  LayerParameter_LayerType_MAT_READ = 44,
  LayerParameter_LayerType_MAT_WRITE = 43,
  LayerParameter_LayerType_MEMORY_DATA = 29,
  LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  LayerParameter_LayerType_MVN = 34,
  LayerParameter_LayerType_ONEHOT = 56,
  LayerParameter_LayerType_PADDING = 42,
  LayerParameter_LayerType_POOLING = 17,
  LayerParameter_LayerType_POWER = 26,
  LayerParameter_LayerType_RELATIVE_ERROR = 54,
  LayerParameter_LayerType_RELU = 18,
  LayerParameter_LayerType_SEG_ACCURACY = 40,
  LayerParameter_LayerType_SIGMOID = 19,
  LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  LayerParameter_LayerType_SILENCE = 36,
  LayerParameter_LayerType_SOFTMAX = 20,
  LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  LayerParameter_LayerType_SPLIT = 22,
  LayerParameter_LayerType_SLICE = 33,
  LayerParameter_LayerType_TANH = 23,
  LayerParameter_LayerType_THRESHOLD = 31,
  LayerParameter_LayerType_UNIQUE_LABEL = 48,
  LayerParameter_LayerType_WINDOW_DATA = 24
};
bool LayerParameter_LayerType_IsValid(int value);
const LayerParameter_LayerType LayerParameter_LayerType_LayerType_MIN = LayerParameter_LayerType_NONE;
const LayerParameter_LayerType LayerParameter_LayerType_LayerType_MAX = LayerParameter_LayerType_ONEHOT;
const int LayerParameter_LayerType_LayerType_ARRAYSIZE = LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerParameter_LayerType_descriptor();
inline const ::std::string& LayerParameter_LayerType_Name(LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerParameter_LayerType_descriptor(), value);
}
inline bool LayerParameter_LayerType_Parse(
    const ::std::string& name, LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerParameter_LayerType>(
    LayerParameter_LayerType_descriptor(), name, value);
}
enum LayerParameter_DimCheckMode {
  LayerParameter_DimCheckMode_STRICT = 0,
  LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool LayerParameter_DimCheckMode_IsValid(int value);
const LayerParameter_DimCheckMode LayerParameter_DimCheckMode_DimCheckMode_MIN = LayerParameter_DimCheckMode_STRICT;
const LayerParameter_DimCheckMode LayerParameter_DimCheckMode_DimCheckMode_MAX = LayerParameter_DimCheckMode_PERMISSIVE;
const int LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& LayerParameter_DimCheckMode_Name(LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerParameter_DimCheckMode>(
    LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum SegAccuracyParameter_AccuracyMetric {
  SegAccuracyParameter_AccuracyMetric_PixelAccuracy = 0,
  SegAccuracyParameter_AccuracyMetric_ClassAccuracy = 1,
  SegAccuracyParameter_AccuracyMetric_PixelIOU = 2
};
bool SegAccuracyParameter_AccuracyMetric_IsValid(int value);
const SegAccuracyParameter_AccuracyMetric SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MIN = SegAccuracyParameter_AccuracyMetric_PixelAccuracy;
const SegAccuracyParameter_AccuracyMetric SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX = SegAccuracyParameter_AccuracyMetric_PixelIOU;
const int SegAccuracyParameter_AccuracyMetric_AccuracyMetric_ARRAYSIZE = SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX + 1;

const ::google::protobuf::EnumDescriptor* SegAccuracyParameter_AccuracyMetric_descriptor();
inline const ::std::string& SegAccuracyParameter_AccuracyMetric_Name(SegAccuracyParameter_AccuracyMetric value) {
  return ::google::protobuf::internal::NameOfEnum(
    SegAccuracyParameter_AccuracyMetric_descriptor(), value);
}
inline bool SegAccuracyParameter_AccuracyMetric_Parse(
    const ::std::string& name, SegAccuracyParameter_AccuracyMetric* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SegAccuracyParameter_AccuracyMetric>(
    SegAccuracyParameter_AccuracyMetric_descriptor(), name, value);
}
enum BiasChannelParameter_LabelType {
  BiasChannelParameter_LabelType_IMAGE = 1,
  BiasChannelParameter_LabelType_PIXEL = 2
};
bool BiasChannelParameter_LabelType_IsValid(int value);
const BiasChannelParameter_LabelType BiasChannelParameter_LabelType_LabelType_MIN = BiasChannelParameter_LabelType_IMAGE;
const BiasChannelParameter_LabelType BiasChannelParameter_LabelType_LabelType_MAX = BiasChannelParameter_LabelType_PIXEL;
const int BiasChannelParameter_LabelType_LabelType_ARRAYSIZE = BiasChannelParameter_LabelType_LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BiasChannelParameter_LabelType_descriptor();
inline const ::std::string& BiasChannelParameter_LabelType_Name(BiasChannelParameter_LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BiasChannelParameter_LabelType_descriptor(), value);
}
inline bool BiasChannelParameter_LabelType_Parse(
    const ::std::string& name, BiasChannelParameter_LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BiasChannelParameter_LabelType>(
    BiasChannelParameter_LabelType_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum EuclideanLossParameter_Type {
  EuclideanLossParameter_Type_L2 = 0,
  EuclideanLossParameter_Type_L2sqrt = 1
};
bool EuclideanLossParameter_Type_IsValid(int value);
const EuclideanLossParameter_Type EuclideanLossParameter_Type_Type_MIN = EuclideanLossParameter_Type_L2;
const EuclideanLossParameter_Type EuclideanLossParameter_Type_Type_MAX = EuclideanLossParameter_Type_L2sqrt;
const int EuclideanLossParameter_Type_Type_ARRAYSIZE = EuclideanLossParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EuclideanLossParameter_Type_descriptor();
inline const ::std::string& EuclideanLossParameter_Type_Name(EuclideanLossParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EuclideanLossParameter_Type_descriptor(), value);
}
inline bool EuclideanLossParameter_Type_Parse(
    const ::std::string& name, EuclideanLossParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EuclideanLossParameter_Type>(
    EuclideanLossParameter_Type_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum ImageDataParameter_LabelType {
  ImageDataParameter_LabelType_NONE = 0,
  ImageDataParameter_LabelType_IMAGE = 1,
  ImageDataParameter_LabelType_PIXEL = 2
};
bool ImageDataParameter_LabelType_IsValid(int value);
const ImageDataParameter_LabelType ImageDataParameter_LabelType_LabelType_MIN = ImageDataParameter_LabelType_NONE;
const ImageDataParameter_LabelType ImageDataParameter_LabelType_LabelType_MAX = ImageDataParameter_LabelType_PIXEL;
const int ImageDataParameter_LabelType_LabelType_ARRAYSIZE = ImageDataParameter_LabelType_LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageDataParameter_LabelType_descriptor();
inline const ::std::string& ImageDataParameter_LabelType_Name(ImageDataParameter_LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageDataParameter_LabelType_descriptor(), value);
}
inline bool ImageDataParameter_LabelType_Parse(
    const ::std::string& name, ImageDataParameter_LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageDataParameter_LabelType>(
    ImageDataParameter_LabelType_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BlobProto* other);
  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobProto* New() const final {
    return CreateMaybeMessage<BlobProto>(NULL);
  }

  BlobProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlobProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobProtoVector(BlobProtoVector&& from) noexcept
    : BlobProtoVector() {
    *this = ::std::move(from);
  }

  inline BlobProtoVector& operator=(BlobProtoVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BlobProtoVector* other);
  friend void swap(BlobProtoVector& a, BlobProtoVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const final {
    return CreateMaybeMessage<BlobProtoVector>(NULL);
  }

  BlobProtoVector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlobProtoVector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProtoVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(Datum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Datum* other);
  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Datum* New() const final {
    return CreateMaybeMessage<Datum>(NULL);
  }

  Datum* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_encoded();
  void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  bool encoded_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FillerParameter* other);
  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const final {
    return CreateMaybeMessage<FillerParameter>(NULL);
  }

  FillerParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FillerParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_mean();
  void clear_has_mean();
  void set_has_std();
  void clear_has_std();
  void set_has_sparse();
  void clear_has_sparse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  ::google::protobuf::int32 sparse_;
  float max_;
  float std_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NetParameter* other);
  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetParameter* New() const final {
    return CreateMaybeMessage<NetParameter>(NULL);
  }

  NetParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.LayerParameter layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  ::caffe::LayerParameter* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layers();
  const ::caffe::LayerParameter& layers(int index) const;
  ::caffe::LayerParameter* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  private:
  const ::caffe::NetState& _internal_state() const;
  public:
  const ::caffe::NetState& state() const;
  ::caffe::NetState* release_state();
  ::caffe::NetState* mutable_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_force_backward();
  void clear_has_force_backward();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::NetState* state_;
  bool force_backward_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverParameter(SolverParameter&& from) noexcept
    : SolverParameter() {
    *this = ::std::move(from);
  }

  inline SolverParameter& operator=(SolverParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SolverParameter* other);
  friend void swap(SolverParameter& a, SolverParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const final {
    return CreateMaybeMessage<SolverParameter>(NULL);
  }

  SolverParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolverParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static const SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD =
    SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_net(int index, ::std::string&& value);
  #endif
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  #if LANG_CXX11
  void add_test_net(::std::string&& value);
  #endif
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // repeated .caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  ::caffe::NetParameter* mutable_test_net_param(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();
  const ::caffe::NetParameter& test_net_param(int index) const;
  ::caffe::NetParameter* add_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  ::caffe::NetState* mutable_test_state(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* add_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  #if LANG_CXX11
  void set_train_net(::std::string&& value);
  #endif
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_lr_policy(::std::string&& value);
  #endif
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot_prefix(::std::string&& value);
  #endif
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional string net = 24;
  bool has_net() const;
  void clear_net();
  static const int kNetFieldNumber = 24;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  #if LANG_CXX11
  void set_regularization_type(::std::string&& value);
  #endif
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional .caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  private:
  const ::caffe::NetParameter& _internal_train_net_param() const;
  public:
  const ::caffe::NetParameter& train_net_param() const;
  ::caffe::NetParameter* release_train_net_param();
  ::caffe::NetParameter* mutable_train_net_param();
  void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // optional .caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  private:
  const ::caffe::NetParameter& _internal_net_param() const;
  public:
  const ::caffe::NetParameter& net_param() const;
  ::caffe::NetParameter* release_net_param();
  ::caffe::NetParameter* mutable_net_param();
  void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  private:
  const ::caffe::NetState& _internal_train_state() const;
  public:
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* release_train_state();
  ::caffe::NetState* mutable_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 9;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 10;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 10;
  float power() const;
  void set_power(float value);

  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  ::caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional float delta = 31 [default = 1e-08];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 31;
  float delta() const;
  void set_delta(float value);

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  void set_has_net();
  void clear_has_net();
  void set_has_net_param();
  void clear_has_net_param();
  void set_has_train_net();
  void clear_has_train_net();
  void set_has_train_net_param();
  void clear_has_train_net_param();
  void set_has_train_state();
  void clear_has_train_state();
  void set_has_test_interval();
  void clear_has_test_interval();
  void set_has_test_compute_loss();
  void clear_has_test_compute_loss();
  void set_has_test_initialization();
  void clear_has_test_initialization();
  void set_has_base_lr();
  void clear_has_base_lr();
  void set_has_display();
  void clear_has_display();
  void set_has_average_loss();
  void clear_has_average_loss();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_lr_policy();
  void clear_has_lr_policy();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_momentum();
  void clear_has_momentum();
  void set_has_weight_decay();
  void clear_has_weight_decay();
  void set_has_regularization_type();
  void clear_has_regularization_type();
  void set_has_stepsize();
  void clear_has_stepsize();
  void set_has_snapshot();
  void clear_has_snapshot();
  void set_has_snapshot_prefix();
  void clear_has_snapshot_prefix();
  void set_has_snapshot_diff();
  void clear_has_snapshot_diff();
  void set_has_solver_mode();
  void clear_has_solver_mode();
  void set_has_device_id();
  void clear_has_device_id();
  void set_has_random_seed();
  void clear_has_random_seed();
  void set_has_solver_type();
  void clear_has_solver_type();
  void set_has_delta();
  void clear_has_delta();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_snapshot_after_train();
  void clear_has_snapshot_after_train();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_regularization_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  ::caffe::NetParameter* train_net_param_;
  ::caffe::NetParameter* net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::int32 device_id_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  bool debug_info_;
  int solver_type_;
  ::google::protobuf::int64 random_seed_;
  int solver_mode_;
  bool test_initialization_;
  bool snapshot_after_train_;
  float delta_;
  ::google::protobuf::int32 average_loss_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverState(SolverState&& from) noexcept
    : SolverState() {
    *this = ::std::move(from);
  }

  inline SolverState& operator=(SolverState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SolverState* other);
  friend void swap(SolverState& a, SolverState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverState* New() const final {
    return CreateMaybeMessage<SolverState>(NULL);
  }

  SolverState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolverState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  ::caffe::BlobProto* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* add_history();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  #if LANG_CXX11
  void set_learned_net(::std::string&& value);
  #endif
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  void set_has_iter();
  void clear_has_iter();
  void set_has_learned_net();
  void clear_has_learned_net();
  void set_has_current_step();
  void clear_has_current_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetState(NetState&& from) noexcept
    : NetState() {
    *this = ::std::move(from);
  }

  inline NetState& operator=(NetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NetState* other);
  friend void swap(NetState& a, NetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetState* New() const final {
    return CreateMaybeMessage<NetState>(NULL);
  }

  NetState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetStateRule) */ {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetStateRule(NetStateRule&& from) noexcept
    : NetStateRule() {
    *this = ::std::move(from);
  }

  inline NetStateRule& operator=(NetStateRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NetStateRule* other);
  friend void swap(NetStateRule& a, NetStateRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const final {
    return CreateMaybeMessage<NetStateRule>(NULL);
  }

  NetStateRule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetStateRule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetStateRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 4;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  int not_stage_size() const;
  void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  const ::std::string& not_stage(int index) const;
  ::std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_not_stage(int index, ::std::string&& value);
  #endif
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  ::std::string* add_not_stage();
  void add_not_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_not_stage(::std::string&& value);
  #endif
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // optional .caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  ::google::protobuf::int32 min_level() const;
  void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_min_level();
  void clear_has_min_level();
  void set_has_max_level();
  void clear_has_max_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 max_level_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LayerParameter* other);
  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const final {
    return CreateMaybeMessage<LayerParameter>(NULL);
  }

  LayerParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayerParameter_LayerType LayerType;
  static const LayerType NONE =
    LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL =
    LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY =
    LayerParameter_LayerType_ACCURACY;
  static const LayerType ADAPTIVE_BIAS_CHANNEL =
    LayerParameter_LayerType_ADAPTIVE_BIAS_CHANNEL;
  static const LayerType ARGMAX =
    LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL =
    LayerParameter_LayerType_BNLL;
  static const LayerType BIAS_CHANNEL =
    LayerParameter_LayerType_BIAS_CHANNEL;
  static const LayerType CENSOR_LABEL =
    LayerParameter_LayerType_CENSOR_LABEL;
  static const LayerType CHANNEL_AGGREGATOR =
    LayerParameter_LayerType_CHANNEL_AGGREGATOR;
  static const LayerType CONCAT =
    LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS =
    LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION =
    LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA =
    LayerParameter_LayerType_DATA;
  static const LayerType DENSE_CRF =
    LayerParameter_LayerType_DENSE_CRF;
  static const LayerType DOMINANT_CHANNEL =
    LayerParameter_LayerType_DOMINANT_CHANNEL;
  static const LayerType DROPOUT =
    LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA =
    LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS =
    LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE =
    LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP =
    LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN =
    LayerParameter_LayerType_FLATTEN;
  static const LayerType GAIN_CHANNEL =
    LayerParameter_LayerType_GAIN_CHANNEL;
  static const LayerType HDF5_DATA =
    LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT =
    LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS =
    LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType HISTOGRAM =
    LayerParameter_LayerType_HISTOGRAM;
  static const LayerType IGNORE_OVERLAY =
    LayerParameter_LayerType_IGNORE_OVERLAY;
  static const LayerType IM2COL =
    LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA =
    LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType IMAGE_SEG_DATA =
    LayerParameter_LayerType_IMAGE_SEG_DATA;
  static const LayerType INFOGAIN_LOSS =
    LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT =
    LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType INTERP =
    LayerParameter_LayerType_INTERP;
  static const LayerType LRN =
    LayerParameter_LayerType_LRN;
  static const LayerType MAT_READ =
    LayerParameter_LayerType_MAT_READ;
  static const LayerType MAT_WRITE =
    LayerParameter_LayerType_MAT_WRITE;
  static const LayerType MEMORY_DATA =
    LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS =
    LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN =
    LayerParameter_LayerType_MVN;
  static const LayerType ONEHOT =
    LayerParameter_LayerType_ONEHOT;
  static const LayerType PADDING =
    LayerParameter_LayerType_PADDING;
  static const LayerType POOLING =
    LayerParameter_LayerType_POOLING;
  static const LayerType POWER =
    LayerParameter_LayerType_POWER;
  static const LayerType RELATIVE_ERROR =
    LayerParameter_LayerType_RELATIVE_ERROR;
  static const LayerType RELU =
    LayerParameter_LayerType_RELU;
  static const LayerType SEG_ACCURACY =
    LayerParameter_LayerType_SEG_ACCURACY;
  static const LayerType SIGMOID =
    LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE =
    LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX =
    LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS =
    LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT =
    LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE =
    LayerParameter_LayerType_SLICE;
  static const LayerType TANH =
    LayerParameter_LayerType_TANH;
  static const LayerType THRESHOLD =
    LayerParameter_LayerType_THRESHOLD;
  static const LayerType UNIQUE_LABEL =
    LayerParameter_LayerType_UNIQUE_LABEL;
  static const LayerType WINDOW_DATA =
    LayerParameter_LayerType_WINDOW_DATA;
  static inline bool LayerType_IsValid(int value) {
    return LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return LayerParameter_LayerType_Parse(name, value);
  }

  typedef LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 2;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(int index, ::std::string&& value);
  #endif
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  #if LANG_CXX11
  void add_bottom(::std::string&& value);
  #endif
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_top(int index, ::std::string&& value);
  #endif
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  #if LANG_CXX11
  void add_top(::std::string&& value);
  #endif
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated .caffe.NetStateRule include = 32;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 32;
  ::caffe::NetStateRule* mutable_include(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* add_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* add_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated string param = 1001;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1001;
  const ::std::string& param(int index) const;
  ::std::string* mutable_param(int index);
  void set_param(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_param(int index, ::std::string&& value);
  #endif
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  ::std::string* add_param();
  void add_param(const ::std::string& value);
  #if LANG_CXX11
  void add_param(::std::string&& value);
  #endif
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  ::caffe::LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::caffe::LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::caffe::LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  private:
  const ::caffe::V0LayerParameter& _internal_layer() const;
  public:
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* release_layer();
  ::caffe::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  private:
  const ::caffe::ConcatParameter& _internal_concat_param() const;
  public:
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* release_concat_param();
  ::caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  private:
  const ::caffe::ConvolutionParameter& _internal_convolution_param() const;
  public:
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* release_convolution_param();
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  private:
  const ::caffe::DataParameter& _internal_data_param() const;
  public:
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* release_data_param();
  ::caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  private:
  const ::caffe::DropoutParameter& _internal_dropout_param() const;
  public:
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* release_dropout_param();
  ::caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  private:
  const ::caffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  public:
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  private:
  const ::caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  public:
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  private:
  const ::caffe::ImageDataParameter& _internal_image_data_param() const;
  public:
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* release_image_data_param();
  ::caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  private:
  const ::caffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  public:
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  private:
  const ::caffe::InnerProductParameter& _internal_inner_product_param() const;
  public:
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* release_inner_product_param();
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  private:
  const ::caffe::LRNParameter& _internal_lrn_param() const;
  public:
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* release_lrn_param();
  ::caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  private:
  const ::caffe::PoolingParameter& _internal_pooling_param() const;
  public:
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* release_pooling_param();
  ::caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  private:
  const ::caffe::WindowDataParameter& _internal_window_data_param() const;
  public:
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* release_window_data_param();
  ::caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  private:
  const ::caffe::PowerParameter& _internal_power_param() const;
  public:
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* release_power_param();
  ::caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  private:
  const ::caffe::MemoryDataParameter& _internal_memory_data_param() const;
  public:
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* release_memory_data_param();
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  private:
  const ::caffe::ArgMaxParameter& _internal_argmax_param() const;
  public:
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* release_argmax_param();
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  private:
  const ::caffe::EltwiseParameter& _internal_eltwise_param() const;
  public:
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* release_eltwise_param();
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  private:
  const ::caffe::ThresholdParameter& _internal_threshold_param() const;
  public:
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* release_threshold_param();
  ::caffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  private:
  const ::caffe::DummyDataParameter& _internal_dummy_data_param() const;
  public:
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* release_dummy_data_param();
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  private:
  const ::caffe::AccuracyParameter& _internal_accuracy_param() const;
  public:
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* release_accuracy_param();
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  private:
  const ::caffe::HingeLossParameter& _internal_hinge_loss_param() const;
  public:
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  private:
  const ::caffe::ReLUParameter& _internal_relu_param() const;
  public:
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* release_relu_param();
  ::caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  private:
  const ::caffe::SliceParameter& _internal_slice_param() const;
  public:
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* release_slice_param();
  ::caffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  private:
  const ::caffe::MVNParameter& _internal_mvn_param() const;
  public:
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* release_mvn_param();
  ::caffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  private:
  const ::caffe::TransformationParameter& _internal_transform_param() const;
  public:
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* release_transform_param();
  ::caffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  private:
  const ::caffe::TanHParameter& _internal_tanh_param() const;
  public:
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* release_tanh_param();
  ::caffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  private:
  const ::caffe::SigmoidParameter& _internal_sigmoid_param() const;
  public:
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* release_sigmoid_param();
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  private:
  const ::caffe::SoftmaxParameter& _internal_softmax_param() const;
  public:
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* release_softmax_param();
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  private:
  const ::caffe::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  public:
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  private:
  const ::caffe::ExpParameter& _internal_exp_param() const;
  public:
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* release_exp_param();
  ::caffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.SegAccuracyParameter seg_accuracy_param = 42;
  bool has_seg_accuracy_param() const;
  void clear_seg_accuracy_param();
  static const int kSegAccuracyParamFieldNumber = 42;
  private:
  const ::caffe::SegAccuracyParameter& _internal_seg_accuracy_param() const;
  public:
  const ::caffe::SegAccuracyParameter& seg_accuracy_param() const;
  ::caffe::SegAccuracyParameter* release_seg_accuracy_param();
  ::caffe::SegAccuracyParameter* mutable_seg_accuracy_param();
  void set_allocated_seg_accuracy_param(::caffe::SegAccuracyParameter* seg_accuracy_param);

  // optional .caffe.InterpParameter interp_param = 43;
  bool has_interp_param() const;
  void clear_interp_param();
  static const int kInterpParamFieldNumber = 43;
  private:
  const ::caffe::InterpParameter& _internal_interp_param() const;
  public:
  const ::caffe::InterpParameter& interp_param() const;
  ::caffe::InterpParameter* release_interp_param();
  ::caffe::InterpParameter* mutable_interp_param();
  void set_allocated_interp_param(::caffe::InterpParameter* interp_param);

  // optional .caffe.SoftmaxLossParameter softmaxloss_param = 44;
  bool has_softmaxloss_param() const;
  void clear_softmaxloss_param();
  static const int kSoftmaxlossParamFieldNumber = 44;
  private:
  const ::caffe::SoftmaxLossParameter& _internal_softmaxloss_param() const;
  public:
  const ::caffe::SoftmaxLossParameter& softmaxloss_param() const;
  ::caffe::SoftmaxLossParameter* release_softmaxloss_param();
  ::caffe::SoftmaxLossParameter* mutable_softmaxloss_param();
  void set_allocated_softmaxloss_param(::caffe::SoftmaxLossParameter* softmaxloss_param);

  // optional .caffe.PaddingParameter padding_param = 45;
  bool has_padding_param() const;
  void clear_padding_param();
  static const int kPaddingParamFieldNumber = 45;
  private:
  const ::caffe::PaddingParameter& _internal_padding_param() const;
  public:
  const ::caffe::PaddingParameter& padding_param() const;
  ::caffe::PaddingParameter* release_padding_param();
  ::caffe::PaddingParameter* mutable_padding_param();
  void set_allocated_padding_param(::caffe::PaddingParameter* padding_param);

  // optional .caffe.MatWriteParameter mat_write_param = 46;
  bool has_mat_write_param() const;
  void clear_mat_write_param();
  static const int kMatWriteParamFieldNumber = 46;
  private:
  const ::caffe::MatWriteParameter& _internal_mat_write_param() const;
  public:
  const ::caffe::MatWriteParameter& mat_write_param() const;
  ::caffe::MatWriteParameter* release_mat_write_param();
  ::caffe::MatWriteParameter* mutable_mat_write_param();
  void set_allocated_mat_write_param(::caffe::MatWriteParameter* mat_write_param);

  // optional .caffe.MatReadParameter mat_read_param = 47;
  bool has_mat_read_param() const;
  void clear_mat_read_param();
  static const int kMatReadParamFieldNumber = 47;
  private:
  const ::caffe::MatReadParameter& _internal_mat_read_param() const;
  public:
  const ::caffe::MatReadParameter& mat_read_param() const;
  ::caffe::MatReadParameter* release_mat_read_param();
  ::caffe::MatReadParameter* mutable_mat_read_param();
  void set_allocated_mat_read_param(::caffe::MatReadParameter* mat_read_param);

  // optional .caffe.DenseCRFParameter dense_crf_param = 48;
  bool has_dense_crf_param() const;
  void clear_dense_crf_param();
  static const int kDenseCrfParamFieldNumber = 48;
  private:
  const ::caffe::DenseCRFParameter& _internal_dense_crf_param() const;
  public:
  const ::caffe::DenseCRFParameter& dense_crf_param() const;
  ::caffe::DenseCRFParameter* release_dense_crf_param();
  ::caffe::DenseCRFParameter* mutable_dense_crf_param();
  void set_allocated_dense_crf_param(::caffe::DenseCRFParameter* dense_crf_param);

  // optional .caffe.DominantChannelParameter dominant_channel_param = 49;
  bool has_dominant_channel_param() const;
  void clear_dominant_channel_param();
  static const int kDominantChannelParamFieldNumber = 49;
  private:
  const ::caffe::DominantChannelParameter& _internal_dominant_channel_param() const;
  public:
  const ::caffe::DominantChannelParameter& dominant_channel_param() const;
  ::caffe::DominantChannelParameter* release_dominant_channel_param();
  ::caffe::DominantChannelParameter* mutable_dominant_channel_param();
  void set_allocated_dominant_channel_param(::caffe::DominantChannelParameter* dominant_channel_param);

  // optional .caffe.BiasChannelParameter bias_channel_param = 50;
  bool has_bias_channel_param() const;
  void clear_bias_channel_param();
  static const int kBiasChannelParamFieldNumber = 50;
  private:
  const ::caffe::BiasChannelParameter& _internal_bias_channel_param() const;
  public:
  const ::caffe::BiasChannelParameter& bias_channel_param() const;
  ::caffe::BiasChannelParameter* release_bias_channel_param();
  ::caffe::BiasChannelParameter* mutable_bias_channel_param();
  void set_allocated_bias_channel_param(::caffe::BiasChannelParameter* bias_channel_param);

  // optional .caffe.UniqueLabelParameter unique_label_param = 51;
  bool has_unique_label_param() const;
  void clear_unique_label_param();
  static const int kUniqueLabelParamFieldNumber = 51;
  private:
  const ::caffe::UniqueLabelParameter& _internal_unique_label_param() const;
  public:
  const ::caffe::UniqueLabelParameter& unique_label_param() const;
  ::caffe::UniqueLabelParameter* release_unique_label_param();
  ::caffe::UniqueLabelParameter* mutable_unique_label_param();
  void set_allocated_unique_label_param(::caffe::UniqueLabelParameter* unique_label_param);

  // optional .caffe.CensorLabelParameter censor_label_param = 52;
  bool has_censor_label_param() const;
  void clear_censor_label_param();
  static const int kCensorLabelParamFieldNumber = 52;
  private:
  const ::caffe::CensorLabelParameter& _internal_censor_label_param() const;
  public:
  const ::caffe::CensorLabelParameter& censor_label_param() const;
  ::caffe::CensorLabelParameter* release_censor_label_param();
  ::caffe::CensorLabelParameter* mutable_censor_label_param();
  void set_allocated_censor_label_param(::caffe::CensorLabelParameter* censor_label_param);

  // optional .caffe.AdaptiveBiasChannelParameter adaptive_bias_channel_param = 53;
  bool has_adaptive_bias_channel_param() const;
  void clear_adaptive_bias_channel_param();
  static const int kAdaptiveBiasChannelParamFieldNumber = 53;
  private:
  const ::caffe::AdaptiveBiasChannelParameter& _internal_adaptive_bias_channel_param() const;
  public:
  const ::caffe::AdaptiveBiasChannelParameter& adaptive_bias_channel_param() const;
  ::caffe::AdaptiveBiasChannelParameter* release_adaptive_bias_channel_param();
  ::caffe::AdaptiveBiasChannelParameter* mutable_adaptive_bias_channel_param();
  void set_allocated_adaptive_bias_channel_param(::caffe::AdaptiveBiasChannelParameter* adaptive_bias_channel_param);

  // optional .caffe.ChannelAggregatorParameter channel_aggregator_param = 54;
  bool has_channel_aggregator_param() const;
  void clear_channel_aggregator_param();
  static const int kChannelAggregatorParamFieldNumber = 54;
  private:
  const ::caffe::ChannelAggregatorParameter& _internal_channel_aggregator_param() const;
  public:
  const ::caffe::ChannelAggregatorParameter& channel_aggregator_param() const;
  ::caffe::ChannelAggregatorParameter* release_channel_aggregator_param();
  ::caffe::ChannelAggregatorParameter* mutable_channel_aggregator_param();
  void set_allocated_channel_aggregator_param(::caffe::ChannelAggregatorParameter* channel_aggregator_param);

  // optional .caffe.IgnoreOverlayParameter ignore_overlay_param = 55;
  bool has_ignore_overlay_param() const;
  void clear_ignore_overlay_param();
  static const int kIgnoreOverlayParamFieldNumber = 55;
  private:
  const ::caffe::IgnoreOverlayParameter& _internal_ignore_overlay_param() const;
  public:
  const ::caffe::IgnoreOverlayParameter& ignore_overlay_param() const;
  ::caffe::IgnoreOverlayParameter* release_ignore_overlay_param();
  ::caffe::IgnoreOverlayParameter* mutable_ignore_overlay_param();
  void set_allocated_ignore_overlay_param(::caffe::IgnoreOverlayParameter* ignore_overlay_param);

  // optional .caffe.HistogramParameter histogram_param = 56;
  bool has_histogram_param() const;
  void clear_histogram_param();
  static const int kHistogramParamFieldNumber = 56;
  private:
  const ::caffe::HistogramParameter& _internal_histogram_param() const;
  public:
  const ::caffe::HistogramParameter& histogram_param() const;
  ::caffe::HistogramParameter* release_histogram_param();
  ::caffe::HistogramParameter* mutable_histogram_param();
  void set_allocated_histogram_param(::caffe::HistogramParameter* histogram_param);

  // optional .caffe.EuclideanLossParameter euclidean_loss_param = 57;
  bool has_euclidean_loss_param() const;
  void clear_euclidean_loss_param();
  static const int kEuclideanLossParamFieldNumber = 57;
  private:
  const ::caffe::EuclideanLossParameter& _internal_euclidean_loss_param() const;
  public:
  const ::caffe::EuclideanLossParameter& euclidean_loss_param() const;
  ::caffe::EuclideanLossParameter* release_euclidean_loss_param();
  ::caffe::EuclideanLossParameter* mutable_euclidean_loss_param();
  void set_allocated_euclidean_loss_param(::caffe::EuclideanLossParameter* euclidean_loss_param);

  // optional .caffe.GainChannelParameter gain_channel_param = 58;
  bool has_gain_channel_param() const;
  void clear_gain_channel_param();
  static const int kGainChannelParamFieldNumber = 58;
  private:
  const ::caffe::GainChannelParameter& _internal_gain_channel_param() const;
  public:
  const ::caffe::GainChannelParameter& gain_channel_param() const;
  ::caffe::GainChannelParameter* release_gain_channel_param();
  ::caffe::GainChannelParameter* mutable_gain_channel_param();
  void set_allocated_gain_channel_param(::caffe::GainChannelParameter* gain_channel_param);

  // optional .caffe.OneHotParameter onehot_param = 59;
  bool has_onehot_param() const;
  void clear_onehot_param();
  static const int kOnehotParamFieldNumber = 59;
  private:
  const ::caffe::OneHotParameter& _internal_onehot_param() const;
  public:
  const ::caffe::OneHotParameter& onehot_param() const;
  ::caffe::OneHotParameter* release_onehot_param();
  ::caffe::OneHotParameter* mutable_onehot_param();
  void set_allocated_onehot_param(::caffe::OneHotParameter* onehot_param);

  // optional .caffe.LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::caffe::LayerParameter_LayerType type() const;
  void set_type(::caffe::LayerParameter_LayerType value);

  // optional bool strict_dim = 1003 [default = true];
  bool has_strict_dim() const;
  void clear_strict_dim();
  static const int kStrictDimFieldNumber = 1003;
  bool strict_dim() const;
  void set_strict_dim(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_strict_dim();
  void clear_has_strict_dim();
  void set_has_accuracy_param();
  void clear_has_accuracy_param();
  void set_has_adaptive_bias_channel_param();
  void clear_has_adaptive_bias_channel_param();
  void set_has_argmax_param();
  void clear_has_argmax_param();
  void set_has_bias_channel_param();
  void clear_has_bias_channel_param();
  void set_has_censor_label_param();
  void clear_has_censor_label_param();
  void set_has_channel_aggregator_param();
  void clear_has_channel_aggregator_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_contrastive_loss_param();
  void clear_has_contrastive_loss_param();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_data_param();
  void clear_has_data_param();
  void set_has_dense_crf_param();
  void clear_has_dense_crf_param();
  void set_has_dominant_channel_param();
  void clear_has_dominant_channel_param();
  void set_has_dropout_param();
  void clear_has_dropout_param();
  void set_has_dummy_data_param();
  void clear_has_dummy_data_param();
  void set_has_eltwise_param();
  void clear_has_eltwise_param();
  void set_has_euclidean_loss_param();
  void clear_has_euclidean_loss_param();
  void set_has_exp_param();
  void clear_has_exp_param();
  void set_has_gain_channel_param();
  void clear_has_gain_channel_param();
  void set_has_hdf5_data_param();
  void clear_has_hdf5_data_param();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();
  void set_has_hinge_loss_param();
  void clear_has_hinge_loss_param();
  void set_has_histogram_param();
  void clear_has_histogram_param();
  void set_has_ignore_overlay_param();
  void clear_has_ignore_overlay_param();
  void set_has_image_data_param();
  void clear_has_image_data_param();
  void set_has_infogain_loss_param();
  void clear_has_infogain_loss_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_interp_param();
  void clear_has_interp_param();
  void set_has_lrn_param();
  void clear_has_lrn_param();
  void set_has_mat_read_param();
  void clear_has_mat_read_param();
  void set_has_mat_write_param();
  void clear_has_mat_write_param();
  void set_has_memory_data_param();
  void clear_has_memory_data_param();
  void set_has_mvn_param();
  void clear_has_mvn_param();
  void set_has_onehot_param();
  void clear_has_onehot_param();
  void set_has_padding_param();
  void clear_has_padding_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_power_param();
  void clear_has_power_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_seg_accuracy_param();
  void clear_has_seg_accuracy_param();
  void set_has_sigmoid_param();
  void clear_has_sigmoid_param();
  void set_has_softmax_param();
  void clear_has_softmax_param();
  void set_has_softmaxloss_param();
  void clear_has_softmaxloss_param();
  void set_has_slice_param();
  void clear_has_slice_param();
  void set_has_tanh_param();
  void clear_has_tanh_param();
  void set_has_threshold_param();
  void clear_has_threshold_param();
  void set_has_unique_label_param();
  void clear_has_unique_label_param();
  void set_has_window_data_param();
  void clear_has_window_data_param();
  void set_has_transform_param();
  void clear_has_transform_param();
  void set_has_layer();
  void clear_has_layer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::V0LayerParameter* layer_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::SegAccuracyParameter* seg_accuracy_param_;
  ::caffe::InterpParameter* interp_param_;
  ::caffe::SoftmaxLossParameter* softmaxloss_param_;
  ::caffe::PaddingParameter* padding_param_;
  ::caffe::MatWriteParameter* mat_write_param_;
  ::caffe::MatReadParameter* mat_read_param_;
  ::caffe::DenseCRFParameter* dense_crf_param_;
  ::caffe::DominantChannelParameter* dominant_channel_param_;
  ::caffe::BiasChannelParameter* bias_channel_param_;
  ::caffe::UniqueLabelParameter* unique_label_param_;
  ::caffe::CensorLabelParameter* censor_label_param_;
  ::caffe::AdaptiveBiasChannelParameter* adaptive_bias_channel_param_;
  ::caffe::ChannelAggregatorParameter* channel_aggregator_param_;
  ::caffe::IgnoreOverlayParameter* ignore_overlay_param_;
  ::caffe::HistogramParameter* histogram_param_;
  ::caffe::EuclideanLossParameter* euclidean_loss_param_;
  ::caffe::GainChannelParameter* gain_channel_param_;
  ::caffe::OneHotParameter* onehot_param_;
  int type_;
  bool strict_dim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TransformationParameter) */ {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationParameter(TransformationParameter&& from) noexcept
    : TransformationParameter() {
    *this = ::std::move(from);
  }

  inline TransformationParameter& operator=(TransformationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TransformationParameter* other);
  friend void swap(TransformationParameter& a, TransformationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const final {
    return CreateMaybeMessage<TransformationParameter>(NULL);
  }

  TransformationParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformationParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  void set_has_scale();
  void clear_has_scale();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mean_file();
  void clear_has_mean_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  bool mirror_;
  ::google::protobuf::uint32 crop_size_;
  float scale_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SegAccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SegAccuracyParameter) */ {
 public:
  SegAccuracyParameter();
  virtual ~SegAccuracyParameter();

  SegAccuracyParameter(const SegAccuracyParameter& from);

  inline SegAccuracyParameter& operator=(const SegAccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SegAccuracyParameter(SegAccuracyParameter&& from) noexcept
    : SegAccuracyParameter() {
    *this = ::std::move(from);
  }

  inline SegAccuracyParameter& operator=(SegAccuracyParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegAccuracyParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegAccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const SegAccuracyParameter*>(
               &_SegAccuracyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SegAccuracyParameter* other);
  friend void swap(SegAccuracyParameter& a, SegAccuracyParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SegAccuracyParameter* New() const final {
    return CreateMaybeMessage<SegAccuracyParameter>(NULL);
  }

  SegAccuracyParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SegAccuracyParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SegAccuracyParameter& from);
  void MergeFrom(const SegAccuracyParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegAccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SegAccuracyParameter_AccuracyMetric AccuracyMetric;
  static const AccuracyMetric PixelAccuracy =
    SegAccuracyParameter_AccuracyMetric_PixelAccuracy;
  static const AccuracyMetric ClassAccuracy =
    SegAccuracyParameter_AccuracyMetric_ClassAccuracy;
  static const AccuracyMetric PixelIOU =
    SegAccuracyParameter_AccuracyMetric_PixelIOU;
  static inline bool AccuracyMetric_IsValid(int value) {
    return SegAccuracyParameter_AccuracyMetric_IsValid(value);
  }
  static const AccuracyMetric AccuracyMetric_MIN =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MIN;
  static const AccuracyMetric AccuracyMetric_MAX =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX;
  static const int AccuracyMetric_ARRAYSIZE =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccuracyMetric_descriptor() {
    return SegAccuracyParameter_AccuracyMetric_descriptor();
  }
  static inline const ::std::string& AccuracyMetric_Name(AccuracyMetric value) {
    return SegAccuracyParameter_AccuracyMetric_Name(value);
  }
  static inline bool AccuracyMetric_Parse(const ::std::string& name,
      AccuracyMetric* value) {
    return SegAccuracyParameter_AccuracyMetric_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 ignore_label = 2;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 2;
  ::google::protobuf::int32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::int32 value);
  void add_ignore_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignore_label();

  // optional .caffe.SegAccuracyParameter.AccuracyMetric metric = 1 [default = PixelAccuracy];
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;
  ::caffe::SegAccuracyParameter_AccuracyMetric metric() const;
  void set_metric(::caffe::SegAccuracyParameter_AccuracyMetric value);

  // optional bool reset = 3 [default = true];
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 3;
  bool reset() const;
  void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SegAccuracyParameter)
 private:
  void set_has_metric();
  void clear_has_metric();
  void set_has_reset();
  void clear_has_reset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignore_label_;
  int metric_;
  bool reset_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SoftmaxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxLossParameter) */ {
 public:
  SoftmaxLossParameter();
  virtual ~SoftmaxLossParameter();

  SoftmaxLossParameter(const SoftmaxLossParameter& from);

  inline SoftmaxLossParameter& operator=(const SoftmaxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftmaxLossParameter(SoftmaxLossParameter&& from) noexcept
    : SoftmaxLossParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxLossParameter& operator=(SoftmaxLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftmaxLossParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxLossParameter*>(
               &_SoftmaxLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SoftmaxLossParameter* other);
  friend void swap(SoftmaxLossParameter& a, SoftmaxLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftmaxLossParameter* New() const final {
    return CreateMaybeMessage<SoftmaxLossParameter>(NULL);
  }

  SoftmaxLossParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SoftmaxLossParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SoftmaxLossParameter& from);
  void MergeFrom(const SoftmaxLossParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftmaxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ignore_label = 2;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 2;
  ::google::protobuf::int32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::int32 value);
  void add_ignore_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignore_label();

  // optional string weight_source = 16;
  bool has_weight_source() const;
  void clear_weight_source();
  static const int kWeightSourceFieldNumber = 16;
  const ::std::string& weight_source() const;
  void set_weight_source(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_source(::std::string&& value);
  #endif
  void set_weight_source(const char* value);
  void set_weight_source(const char* value, size_t size);
  ::std::string* mutable_weight_source();
  ::std::string* release_weight_source();
  void set_allocated_weight_source(::std::string* weight_source);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxLossParameter)
 private:
  void set_has_weight_source();
  void clear_has_weight_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignore_label_;
  ::google::protobuf::internal::ArenaStringPtr weight_source_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DenseCRFParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DenseCRFParameter) */ {
 public:
  DenseCRFParameter();
  virtual ~DenseCRFParameter();

  DenseCRFParameter(const DenseCRFParameter& from);

  inline DenseCRFParameter& operator=(const DenseCRFParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DenseCRFParameter(DenseCRFParameter&& from) noexcept
    : DenseCRFParameter() {
    *this = ::std::move(from);
  }

  inline DenseCRFParameter& operator=(DenseCRFParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseCRFParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseCRFParameter* internal_default_instance() {
    return reinterpret_cast<const DenseCRFParameter*>(
               &_DenseCRFParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DenseCRFParameter* other);
  friend void swap(DenseCRFParameter& a, DenseCRFParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DenseCRFParameter* New() const final {
    return CreateMaybeMessage<DenseCRFParameter>(NULL);
  }

  DenseCRFParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DenseCRFParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DenseCRFParameter& from);
  void MergeFrom(const DenseCRFParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseCRFParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos_xy_std = 2;
  int pos_xy_std_size() const;
  void clear_pos_xy_std();
  static const int kPosXyStdFieldNumber = 2;
  float pos_xy_std(int index) const;
  void set_pos_xy_std(int index, float value);
  void add_pos_xy_std(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos_xy_std() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos_xy_std();

  // repeated float pos_w = 3;
  int pos_w_size() const;
  void clear_pos_w();
  static const int kPosWFieldNumber = 3;
  float pos_w(int index) const;
  void set_pos_w(int index, float value);
  void add_pos_w(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos_w() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos_w();

  // repeated float bi_xy_std = 4;
  int bi_xy_std_size() const;
  void clear_bi_xy_std();
  static const int kBiXyStdFieldNumber = 4;
  float bi_xy_std(int index) const;
  void set_bi_xy_std(int index, float value);
  void add_bi_xy_std(float value);
  const ::google::protobuf::RepeatedField< float >&
      bi_xy_std() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bi_xy_std();

  // repeated float bi_rgb_std = 5;
  int bi_rgb_std_size() const;
  void clear_bi_rgb_std();
  static const int kBiRgbStdFieldNumber = 5;
  float bi_rgb_std(int index) const;
  void set_bi_rgb_std(int index, float value);
  void add_bi_rgb_std(float value);
  const ::google::protobuf::RepeatedField< float >&
      bi_rgb_std() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bi_rgb_std();

  // repeated float bi_w = 6;
  int bi_w_size() const;
  void clear_bi_w();
  static const int kBiWFieldNumber = 6;
  float bi_w(int index) const;
  void set_bi_w(int index, float value);
  void add_bi_w(float value);
  const ::google::protobuf::RepeatedField< float >&
      bi_w() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bi_w();

  // optional int32 max_iter = 1 [default = 10];
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 1;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional bool output_probability = 7 [default = true];
  bool has_output_probability() const;
  void clear_output_probability();
  static const int kOutputProbabilityFieldNumber = 7;
  bool output_probability() const;
  void set_output_probability(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DenseCRFParameter)
 private:
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_output_probability();
  void clear_has_output_probability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > pos_xy_std_;
  ::google::protobuf::RepeatedField< float > pos_w_;
  ::google::protobuf::RepeatedField< float > bi_xy_std_;
  ::google::protobuf::RepeatedField< float > bi_rgb_std_;
  ::google::protobuf::RepeatedField< float > bi_w_;
  ::google::protobuf::int32 max_iter_;
  bool output_probability_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AccuracyParameter) */ {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccuracyParameter(AccuracyParameter&& from) noexcept
    : AccuracyParameter() {
    *this = ::std::move(from);
  }

  inline AccuracyParameter& operator=(AccuracyParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AccuracyParameter* other);
  friend void swap(AccuracyParameter& a, AccuracyParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const final {
    return CreateMaybeMessage<AccuracyParameter>(NULL);
  }

  AccuracyParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccuracyParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  void set_has_top_k();
  void clear_has_top_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 top_k_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdaptiveBiasChannelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AdaptiveBiasChannelParameter) */ {
 public:
  AdaptiveBiasChannelParameter();
  virtual ~AdaptiveBiasChannelParameter();

  AdaptiveBiasChannelParameter(const AdaptiveBiasChannelParameter& from);

  inline AdaptiveBiasChannelParameter& operator=(const AdaptiveBiasChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdaptiveBiasChannelParameter(AdaptiveBiasChannelParameter&& from) noexcept
    : AdaptiveBiasChannelParameter() {
    *this = ::std::move(from);
  }

  inline AdaptiveBiasChannelParameter& operator=(AdaptiveBiasChannelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaptiveBiasChannelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdaptiveBiasChannelParameter* internal_default_instance() {
    return reinterpret_cast<const AdaptiveBiasChannelParameter*>(
               &_AdaptiveBiasChannelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AdaptiveBiasChannelParameter* other);
  friend void swap(AdaptiveBiasChannelParameter& a, AdaptiveBiasChannelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdaptiveBiasChannelParameter* New() const final {
    return CreateMaybeMessage<AdaptiveBiasChannelParameter>(NULL);
  }

  AdaptiveBiasChannelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdaptiveBiasChannelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdaptiveBiasChannelParameter& from);
  void MergeFrom(const AdaptiveBiasChannelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptiveBiasChannelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin_others = 5 [default = 1e-05];
  bool has_margin_others() const;
  void clear_margin_others();
  static const int kMarginOthersFieldNumber = 5;
  float margin_others() const;
  void set_margin_others(float value);

  // optional int32 num_iter = 1 [default = 1];
  bool has_num_iter() const;
  void clear_num_iter();
  static const int kNumIterFieldNumber = 1;
  ::google::protobuf::int32 num_iter() const;
  void set_num_iter(::google::protobuf::int32 value);

  // optional float bg_portion = 2 [default = 0.2];
  bool has_bg_portion() const;
  void clear_bg_portion();
  static const int kBgPortionFieldNumber = 2;
  float bg_portion() const;
  void set_bg_portion(float value);

  // optional float fg_portion = 3 [default = 0.2];
  bool has_fg_portion() const;
  void clear_fg_portion();
  static const int kFgPortionFieldNumber = 3;
  float fg_portion() const;
  void set_fg_portion(float value);

  // optional bool suppress_others = 4 [default = true];
  bool has_suppress_others() const;
  void clear_suppress_others();
  static const int kSuppressOthersFieldNumber = 4;
  bool suppress_others() const;
  void set_suppress_others(bool value);

  // @@protoc_insertion_point(class_scope:caffe.AdaptiveBiasChannelParameter)
 private:
  void set_has_num_iter();
  void clear_has_num_iter();
  void set_has_bg_portion();
  void clear_has_bg_portion();
  void set_has_fg_portion();
  void clear_has_fg_portion();
  void set_has_suppress_others();
  void clear_has_suppress_others();
  void set_has_margin_others();
  void clear_has_margin_others();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float margin_others_;
  ::google::protobuf::int32 num_iter_;
  float bg_portion_;
  float fg_portion_;
  bool suppress_others_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ArgMaxParameter) */ {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgMaxParameter(ArgMaxParameter&& from) noexcept
    : ArgMaxParameter() {
    *this = ::std::move(from);
  }

  inline ArgMaxParameter& operator=(ArgMaxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ArgMaxParameter* other);
  friend void swap(ArgMaxParameter& a, ArgMaxParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const final {
    return CreateMaybeMessage<ArgMaxParameter>(NULL);
  }

  ArgMaxParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgMaxParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgMaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  void set_has_out_max_val();
  void clear_has_out_max_val();
  void set_has_top_k();
  void clear_has_top_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BiasChannelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BiasChannelParameter) */ {
 public:
  BiasChannelParameter();
  virtual ~BiasChannelParameter();

  BiasChannelParameter(const BiasChannelParameter& from);

  inline BiasChannelParameter& operator=(const BiasChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BiasChannelParameter(BiasChannelParameter&& from) noexcept
    : BiasChannelParameter() {
    *this = ::std::move(from);
  }

  inline BiasChannelParameter& operator=(BiasChannelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasChannelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiasChannelParameter* internal_default_instance() {
    return reinterpret_cast<const BiasChannelParameter*>(
               &_BiasChannelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BiasChannelParameter* other);
  friend void swap(BiasChannelParameter& a, BiasChannelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BiasChannelParameter* New() const final {
    return CreateMaybeMessage<BiasChannelParameter>(NULL);
  }

  BiasChannelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BiasChannelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BiasChannelParameter& from);
  void MergeFrom(const BiasChannelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiasChannelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BiasChannelParameter_LabelType LabelType;
  static const LabelType IMAGE =
    BiasChannelParameter_LabelType_IMAGE;
  static const LabelType PIXEL =
    BiasChannelParameter_LabelType_PIXEL;
  static inline bool LabelType_IsValid(int value) {
    return BiasChannelParameter_LabelType_IsValid(value);
  }
  static const LabelType LabelType_MIN =
    BiasChannelParameter_LabelType_LabelType_MIN;
  static const LabelType LabelType_MAX =
    BiasChannelParameter_LabelType_LabelType_MAX;
  static const int LabelType_ARRAYSIZE =
    BiasChannelParameter_LabelType_LabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelType_descriptor() {
    return BiasChannelParameter_LabelType_descriptor();
  }
  static inline const ::std::string& LabelType_Name(LabelType value) {
    return BiasChannelParameter_LabelType_Name(value);
  }
  static inline bool LabelType_Parse(const ::std::string& name,
      LabelType* value) {
    return BiasChannelParameter_LabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 ignore_label = 3;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  ::google::protobuf::int32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::int32 value);
  void add_ignore_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignore_label();

  // optional .caffe.BiasChannelParameter.LabelType label_type = 4 [default = IMAGE];
  bool has_label_type() const;
  void clear_label_type();
  static const int kLabelTypeFieldNumber = 4;
  ::caffe::BiasChannelParameter_LabelType label_type() const;
  void set_label_type(::caffe::BiasChannelParameter_LabelType value);

  // optional float bg_bias = 1 [default = 1];
  bool has_bg_bias() const;
  void clear_bg_bias();
  static const int kBgBiasFieldNumber = 1;
  float bg_bias() const;
  void set_bg_bias(float value);

  // optional float fg_bias = 2 [default = 2];
  bool has_fg_bias() const;
  void clear_fg_bias();
  static const int kFgBiasFieldNumber = 2;
  float fg_bias() const;
  void set_fg_bias(float value);

  // @@protoc_insertion_point(class_scope:caffe.BiasChannelParameter)
 private:
  void set_has_bg_bias();
  void clear_has_bg_bias();
  void set_has_fg_bias();
  void clear_has_fg_bias();
  void set_has_label_type();
  void clear_has_label_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignore_label_;
  int label_type_;
  float bg_bias_;
  float fg_bias_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CensorLabelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CensorLabelParameter) */ {
 public:
  CensorLabelParameter();
  virtual ~CensorLabelParameter();

  CensorLabelParameter(const CensorLabelParameter& from);

  inline CensorLabelParameter& operator=(const CensorLabelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CensorLabelParameter(CensorLabelParameter&& from) noexcept
    : CensorLabelParameter() {
    *this = ::std::move(from);
  }

  inline CensorLabelParameter& operator=(CensorLabelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CensorLabelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CensorLabelParameter* internal_default_instance() {
    return reinterpret_cast<const CensorLabelParameter*>(
               &_CensorLabelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CensorLabelParameter* other);
  friend void swap(CensorLabelParameter& a, CensorLabelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CensorLabelParameter* New() const final {
    return CreateMaybeMessage<CensorLabelParameter>(NULL);
  }

  CensorLabelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CensorLabelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CensorLabelParameter& from);
  void MergeFrom(const CensorLabelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CensorLabelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.CensorLabelParameter)
 private:
  void set_has_ignore_label();
  void clear_has_ignore_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelAggregatorParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ChannelAggregatorParameter) */ {
 public:
  ChannelAggregatorParameter();
  virtual ~ChannelAggregatorParameter();

  ChannelAggregatorParameter(const ChannelAggregatorParameter& from);

  inline ChannelAggregatorParameter& operator=(const ChannelAggregatorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelAggregatorParameter(ChannelAggregatorParameter&& from) noexcept
    : ChannelAggregatorParameter() {
    *this = ::std::move(from);
  }

  inline ChannelAggregatorParameter& operator=(ChannelAggregatorParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelAggregatorParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelAggregatorParameter* internal_default_instance() {
    return reinterpret_cast<const ChannelAggregatorParameter*>(
               &_ChannelAggregatorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ChannelAggregatorParameter* other);
  friend void swap(ChannelAggregatorParameter& a, ChannelAggregatorParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelAggregatorParameter* New() const final {
    return CreateMaybeMessage<ChannelAggregatorParameter>(NULL);
  }

  ChannelAggregatorParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelAggregatorParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelAggregatorParameter& from);
  void MergeFrom(const ChannelAggregatorParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelAggregatorParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label_map_file = 1;
  bool has_label_map_file() const;
  void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 1;
  const ::std::string& label_map_file() const;
  void set_label_map_file(const ::std::string& value);
  #if LANG_CXX11
  void set_label_map_file(::std::string&& value);
  #endif
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  ::std::string* mutable_label_map_file();
  ::std::string* release_label_map_file();
  void set_allocated_label_map_file(::std::string* label_map_file);

  // @@protoc_insertion_point(class_scope:caffe.ChannelAggregatorParameter)
 private:
  void set_has_label_map_file();
  void clear_has_label_map_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_map_file_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ConcatParameter* other);
  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const final {
    return CreateMaybeMessage<ConcatParameter>(NULL);
  }

  ConcatParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConcatParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  void set_has_concat_dim();
  void clear_has_concat_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 concat_dim_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ContrastiveLossParameter) */ {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContrastiveLossParameter(ContrastiveLossParameter&& from) noexcept
    : ContrastiveLossParameter() {
    *this = ::std::move(from);
  }

  inline ContrastiveLossParameter& operator=(ContrastiveLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ContrastiveLossParameter* other);
  friend void swap(ContrastiveLossParameter& a, ContrastiveLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(NULL);
  }

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContrastiveLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  void set_has_margin();
  void clear_has_margin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float margin_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ConvolutionParameter* other);
  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const final {
    return CreateMaybeMessage<ConvolutionParameter>(NULL);
  }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConvolutionParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  public:
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  public:
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 3 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 6 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 hole = 17 [default = 1];
  bool has_hole() const;
  void clear_hole();
  static const int kHoleFieldNumber = 17;
  ::google::protobuf::uint32 hole() const;
  void set_hole(::google::protobuf::uint32 value);

  // optional uint32 hole_h = 18 [default = 1];
  bool has_hole_h() const;
  void clear_hole_h();
  static const int kHoleHFieldNumber = 18;
  ::google::protobuf::uint32 hole_h() const;
  void set_hole_h(::google::protobuf::uint32 value);

  // optional uint32 hole_w = 19 [default = 1];
  bool has_hole_w() const;
  void clear_hole_w();
  static const int kHoleWFieldNumber = 19;
  ::google::protobuf::uint32 hole_w() const;
  void set_hole_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_group();
  void clear_has_group();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_hole();
  void clear_has_hole();
  void set_has_hole_h();
  void clear_has_hole_h();
  void set_has_hole_w();
  void clear_has_hole_w();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 hole_;
  ::google::protobuf::uint32 hole_h_;
  ::google::protobuf::uint32 hole_w_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DataParameter* other);
  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataParameter* New() const final {
    return CreateMaybeMessage<DataParameter>(NULL);
  }

  DataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static const DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 8;
  ::caffe::DataParameter_DB backend() const;
  void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_backend();
  void clear_has_backend();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DominantChannelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DominantChannelParameter) */ {
 public:
  DominantChannelParameter();
  virtual ~DominantChannelParameter();

  DominantChannelParameter(const DominantChannelParameter& from);

  inline DominantChannelParameter& operator=(const DominantChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DominantChannelParameter(DominantChannelParameter&& from) noexcept
    : DominantChannelParameter() {
    *this = ::std::move(from);
  }

  inline DominantChannelParameter& operator=(DominantChannelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DominantChannelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DominantChannelParameter* internal_default_instance() {
    return reinterpret_cast<const DominantChannelParameter*>(
               &_DominantChannelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DominantChannelParameter* other);
  friend void swap(DominantChannelParameter& a, DominantChannelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DominantChannelParameter* New() const final {
    return CreateMaybeMessage<DominantChannelParameter>(NULL);
  }

  DominantChannelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DominantChannelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DominantChannelParameter& from);
  void MergeFrom(const DominantChannelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DominantChannelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.DominantChannelParameter)
 private:
  void set_has_top_k();
  void clear_has_top_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 top_k_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DropoutParameter* other);
  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const final {
    return CreateMaybeMessage<DropoutParameter>(NULL);
  }

  DropoutParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropoutParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropoutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float dropout_ratio_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DummyDataParameter) */ {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DummyDataParameter(DummyDataParameter&& from) noexcept
    : DummyDataParameter() {
    *this = ::std::move(from);
  }

  inline DummyDataParameter& operator=(DummyDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DummyDataParameter* other);
  friend void swap(DummyDataParameter& a, DummyDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const final {
    return CreateMaybeMessage<DummyDataParameter>(NULL);
  }

  DummyDataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DummyDataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  ::caffe::FillerParameter* mutable_data_filler(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();
  const ::caffe::FillerParameter& data_filler(int index) const;
  ::caffe::FillerParameter* add_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;

  // repeated uint32 num = 2;
  int num_size() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num(int index) const;
  void set_num(int index, ::google::protobuf::uint32 value);
  void add_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height(int index) const;
  void set_height(int index, ::google::protobuf::uint32 value);
  void add_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width(int index) const;
  void set_width(int index, ::google::protobuf::uint32 value);
  void add_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseParameter) */ {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EltwiseParameter(EltwiseParameter&& from) noexcept
    : EltwiseParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseParameter& operator=(EltwiseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(EltwiseParameter* other);
  friend void swap(EltwiseParameter& a, EltwiseParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const final {
    return CreateMaybeMessage<EltwiseParameter>(NULL);
  }

  EltwiseParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EltwiseParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EltwiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_stable_prod_grad();
  void clear_has_stable_prod_grad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EuclideanLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EuclideanLossParameter) */ {
 public:
  EuclideanLossParameter();
  virtual ~EuclideanLossParameter();

  EuclideanLossParameter(const EuclideanLossParameter& from);

  inline EuclideanLossParameter& operator=(const EuclideanLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EuclideanLossParameter(EuclideanLossParameter&& from) noexcept
    : EuclideanLossParameter() {
    *this = ::std::move(from);
  }

  inline EuclideanLossParameter& operator=(EuclideanLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EuclideanLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EuclideanLossParameter* internal_default_instance() {
    return reinterpret_cast<const EuclideanLossParameter*>(
               &_EuclideanLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(EuclideanLossParameter* other);
  friend void swap(EuclideanLossParameter& a, EuclideanLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EuclideanLossParameter* New() const final {
    return CreateMaybeMessage<EuclideanLossParameter>(NULL);
  }

  EuclideanLossParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EuclideanLossParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EuclideanLossParameter& from);
  void MergeFrom(const EuclideanLossParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EuclideanLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EuclideanLossParameter_Type Type;
  static const Type L2 =
    EuclideanLossParameter_Type_L2;
  static const Type L2sqrt =
    EuclideanLossParameter_Type_L2sqrt;
  static inline bool Type_IsValid(int value) {
    return EuclideanLossParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EuclideanLossParameter_Type_Type_MIN;
  static const Type Type_MAX =
    EuclideanLossParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EuclideanLossParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EuclideanLossParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EuclideanLossParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EuclideanLossParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EuclideanLossParameter.Type type = 1 [default = L2];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::EuclideanLossParameter_Type type() const;
  void set_type(::caffe::EuclideanLossParameter_Type value);

  // @@protoc_insertion_point(class_scope:caffe.EuclideanLossParameter)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpParameter) */ {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExpParameter(ExpParameter&& from) noexcept
    : ExpParameter() {
    *this = ::std::move(from);
  }

  inline ExpParameter& operator=(ExpParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ExpParameter* other);
  friend void swap(ExpParameter& a, ExpParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const final {
    return CreateMaybeMessage<ExpParameter>(NULL);
  }

  ExpParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExpParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GainChannelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GainChannelParameter) */ {
 public:
  GainChannelParameter();
  virtual ~GainChannelParameter();

  GainChannelParameter(const GainChannelParameter& from);

  inline GainChannelParameter& operator=(const GainChannelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GainChannelParameter(GainChannelParameter&& from) noexcept
    : GainChannelParameter() {
    *this = ::std::move(from);
  }

  inline GainChannelParameter& operator=(GainChannelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GainChannelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GainChannelParameter* internal_default_instance() {
    return reinterpret_cast<const GainChannelParameter*>(
               &_GainChannelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(GainChannelParameter* other);
  friend void swap(GainChannelParameter& a, GainChannelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GainChannelParameter* New() const final {
    return CreateMaybeMessage<GainChannelParameter>(NULL);
  }

  GainChannelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GainChannelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GainChannelParameter& from);
  void MergeFrom(const GainChannelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainChannelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter gain_filler = 4;
  bool has_gain_filler() const;
  void clear_gain_filler();
  static const int kGainFillerFieldNumber = 4;
  private:
  const ::caffe::FillerParameter& _internal_gain_filler() const;
  public:
  const ::caffe::FillerParameter& gain_filler() const;
  ::caffe::FillerParameter* release_gain_filler();
  ::caffe::FillerParameter* mutable_gain_filler();
  void set_allocated_gain_filler(::caffe::FillerParameter* gain_filler);

  // required int32 num_output_nz = 1 [default = 0];
  bool has_num_output_nz() const;
  void clear_num_output_nz();
  static const int kNumOutputNzFieldNumber = 1;
  ::google::protobuf::int32 num_output_nz() const;
  void set_num_output_nz(::google::protobuf::int32 value);

  // optional float drift = 2 [default = 0];
  bool has_drift() const;
  void clear_drift();
  static const int kDriftFieldNumber = 2;
  float drift() const;
  void set_drift(float value);

  // optional float stdev = 3 [default = 0];
  bool has_stdev() const;
  void clear_stdev();
  static const int kStdevFieldNumber = 3;
  float stdev() const;
  void set_stdev(float value);

  // optional bool norm_mean = 5 [default = true];
  bool has_norm_mean() const;
  void clear_norm_mean();
  static const int kNormMeanFieldNumber = 5;
  bool norm_mean() const;
  void set_norm_mean(bool value);

  // optional float thresh = 6 [default = 0.001];
  bool has_thresh() const;
  void clear_thresh();
  static const int kThreshFieldNumber = 6;
  float thresh() const;
  void set_thresh(float value);

  // @@protoc_insertion_point(class_scope:caffe.GainChannelParameter)
 private:
  void set_has_num_output_nz();
  void clear_has_num_output_nz();
  void set_has_drift();
  void clear_has_drift();
  void set_has_stdev();
  void clear_has_stdev();
  void set_has_gain_filler();
  void clear_has_gain_filler();
  void set_has_norm_mean();
  void clear_has_norm_mean();
  void set_has_thresh();
  void clear_has_thresh();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::caffe::FillerParameter* gain_filler_;
  ::google::protobuf::int32 num_output_nz_;
  float drift_;
  float stdev_;
  bool norm_mean_;
  float thresh_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(HDF5DataParameter* other);
  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const final {
    return CreateMaybeMessage<HDF5DataParameter>(NULL);
  }

  HDF5DataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HDF5DataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(HDF5OutputParameter* other);
  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const final {
    return CreateMaybeMessage<HDF5OutputParameter>(NULL);
  }

  HDF5OutputParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HDF5OutputParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDF5OutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  void set_has_file_name();
  void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HingeLossParameter) */ {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HingeLossParameter(HingeLossParameter&& from) noexcept
    : HingeLossParameter() {
    *this = ::std::move(from);
  }

  inline HingeLossParameter& operator=(HingeLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(HingeLossParameter* other);
  friend void swap(HingeLossParameter& a, HingeLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const final {
    return CreateMaybeMessage<HingeLossParameter>(NULL);
  }

  HingeLossParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HingeLossParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HingeLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 =
    HingeLossParameter_Norm_L1;
  static const Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  void set_has_norm();
  void clear_has_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int norm_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HistogramParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HistogramParameter) */ {
 public:
  HistogramParameter();
  virtual ~HistogramParameter();

  HistogramParameter(const HistogramParameter& from);

  inline HistogramParameter& operator=(const HistogramParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HistogramParameter(HistogramParameter&& from) noexcept
    : HistogramParameter() {
    *this = ::std::move(from);
  }

  inline HistogramParameter& operator=(HistogramParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistogramParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistogramParameter* internal_default_instance() {
    return reinterpret_cast<const HistogramParameter*>(
               &_HistogramParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(HistogramParameter* other);
  friend void swap(HistogramParameter& a, HistogramParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HistogramParameter* New() const final {
    return CreateMaybeMessage<HistogramParameter>(NULL);
  }

  HistogramParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HistogramParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HistogramParameter& from);
  void MergeFrom(const HistogramParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ignore_label = 2;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 2;
  ::google::protobuf::int32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::int32 value);
  void add_ignore_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignore_label();

  // required int32 num_labels = 1;
  bool has_num_labels() const;
  void clear_num_labels();
  static const int kNumLabelsFieldNumber = 1;
  ::google::protobuf::int32 num_labels() const;
  void set_num_labels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.HistogramParameter)
 private:
  void set_has_num_labels();
  void clear_has_num_labels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignore_label_;
  ::google::protobuf::int32 num_labels_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IgnoreOverlayParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.IgnoreOverlayParameter) */ {
 public:
  IgnoreOverlayParameter();
  virtual ~IgnoreOverlayParameter();

  IgnoreOverlayParameter(const IgnoreOverlayParameter& from);

  inline IgnoreOverlayParameter& operator=(const IgnoreOverlayParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IgnoreOverlayParameter(IgnoreOverlayParameter&& from) noexcept
    : IgnoreOverlayParameter() {
    *this = ::std::move(from);
  }

  inline IgnoreOverlayParameter& operator=(IgnoreOverlayParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IgnoreOverlayParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IgnoreOverlayParameter* internal_default_instance() {
    return reinterpret_cast<const IgnoreOverlayParameter*>(
               &_IgnoreOverlayParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(IgnoreOverlayParameter* other);
  friend void swap(IgnoreOverlayParameter& a, IgnoreOverlayParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IgnoreOverlayParameter* New() const final {
    return CreateMaybeMessage<IgnoreOverlayParameter>(NULL);
  }

  IgnoreOverlayParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IgnoreOverlayParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IgnoreOverlayParameter& from);
  void MergeFrom(const IgnoreOverlayParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IgnoreOverlayParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.IgnoreOverlayParameter)
 private:
  void set_has_ignore_label();
  void clear_has_ignore_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ImageDataParameter* other);
  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const final {
    return CreateMaybeMessage<ImageDataParameter>(NULL);
  }

  ImageDataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageDataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageDataParameter_LabelType LabelType;
  static const LabelType NONE =
    ImageDataParameter_LabelType_NONE;
  static const LabelType IMAGE =
    ImageDataParameter_LabelType_IMAGE;
  static const LabelType PIXEL =
    ImageDataParameter_LabelType_PIXEL;
  static inline bool LabelType_IsValid(int value) {
    return ImageDataParameter_LabelType_IsValid(value);
  }
  static const LabelType LabelType_MIN =
    ImageDataParameter_LabelType_LabelType_MIN;
  static const LabelType LabelType_MAX =
    ImageDataParameter_LabelType_LabelType_MAX;
  static const int LabelType_ARRAYSIZE =
    ImageDataParameter_LabelType_LabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelType_descriptor() {
    return ImageDataParameter_LabelType_descriptor();
  }
  static inline const ::std::string& LabelType_Name(LabelType value) {
    return ImageDataParameter_LabelType_Name(value);
  }
  static inline bool LabelType_Parse(const ::std::string& name,
      LabelType* value) {
    return ImageDataParameter_LabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional .caffe.ImageDataParameter.LabelType label_type = 16 [default = IMAGE];
  bool has_label_type() const;
  void clear_label_type();
  static const int kLabelTypeFieldNumber = 16;
  ::caffe::ImageDataParameter_LabelType label_type() const;
  void set_label_type(::caffe::ImageDataParameter_LabelType value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  bool is_color() const;
  void set_is_color(bool value);

  // optional bool has_label = 13 [default = true];
  bool has_has_label() const;
  void clear_has_label();
  static const int kHasLabelFieldNumber = 13;
  bool has_label() const;
  void set_has_label(bool value);

  // optional int32 max_labels = 14 [default = 1];
  bool has_max_labels() const;
  void clear_max_labels();
  static const int kMaxLabelsFieldNumber = 14;
  ::google::protobuf::int32 max_labels() const;
  void set_max_labels(::google::protobuf::int32 value);

  // optional int32 ignore_label = 15 [default = 255];
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 15;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_is_color();
  void clear_has_is_color();
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_label_type();
  void clear_has_label_type();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_root_folder();
  void clear_has_root_folder();
  void set_has_has_label();
  void clear_has_has_label();
  void set_has_max_labels();
  void clear_has_max_labels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  bool shuffle_;
  bool mirror_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  int label_type_;
  float scale_;
  bool is_color_;
  bool has_label_;
  ::google::protobuf::int32 max_labels_;
  ::google::protobuf::int32 ignore_label_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(InfogainLossParameter* other);
  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const final {
    return CreateMaybeMessage<InfogainLossParameter>(NULL);
  }

  InfogainLossParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfogainLossParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfogainLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InterpParameter) */ {
 public:
  InterpParameter();
  virtual ~InterpParameter();

  InterpParameter(const InterpParameter& from);

  inline InterpParameter& operator=(const InterpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterpParameter(InterpParameter&& from) noexcept
    : InterpParameter() {
    *this = ::std::move(from);
  }

  inline InterpParameter& operator=(InterpParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterpParameter* internal_default_instance() {
    return reinterpret_cast<const InterpParameter*>(
               &_InterpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(InterpParameter* other);
  friend void swap(InterpParameter& a, InterpParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterpParameter* New() const final {
    return CreateMaybeMessage<InterpParameter>(NULL);
  }

  InterpParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterpParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterpParameter& from);
  void MergeFrom(const InterpParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 height = 1 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 2 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 pad_beg = 5 [default = 0];
  bool has_pad_beg() const;
  void clear_pad_beg();
  static const int kPadBegFieldNumber = 5;
  ::google::protobuf::int32 pad_beg() const;
  void set_pad_beg(::google::protobuf::int32 value);

  // optional int32 pad_end = 6 [default = 0];
  bool has_pad_end() const;
  void clear_pad_end();
  static const int kPadEndFieldNumber = 6;
  ::google::protobuf::int32 pad_end() const;
  void set_pad_end(::google::protobuf::int32 value);

  // optional int32 zoom_factor = 3 [default = 1];
  bool has_zoom_factor() const;
  void clear_zoom_factor();
  static const int kZoomFactorFieldNumber = 3;
  ::google::protobuf::int32 zoom_factor() const;
  void set_zoom_factor(::google::protobuf::int32 value);

  // optional int32 shrink_factor = 4 [default = 1];
  bool has_shrink_factor() const;
  void clear_shrink_factor();
  static const int kShrinkFactorFieldNumber = 4;
  ::google::protobuf::int32 shrink_factor() const;
  void set_shrink_factor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InterpParameter)
 private:
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_zoom_factor();
  void clear_has_zoom_factor();
  void set_has_shrink_factor();
  void clear_has_shrink_factor();
  void set_has_pad_beg();
  void clear_has_pad_beg();
  void set_has_pad_end();
  void clear_has_pad_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 pad_beg_;
  ::google::protobuf::int32 pad_end_;
  ::google::protobuf::int32 zoom_factor_;
  ::google::protobuf::int32 shrink_factor_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(InnerProductParameter* other);
  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const final {
    return CreateMaybeMessage<InnerProductParameter>(NULL);
  }

  InnerProductParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InnerProductParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  public:
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  public:
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(LRNParameter* other);
  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const final {
    return CreateMaybeMessage<LRNParameter>(NULL);
  }

  LRNParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LRNParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LRNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_norm_region();
  void clear_has_norm_region();
  void set_has_k();
  void clear_has_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int norm_region_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatReadParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MatReadParameter) */ {
 public:
  MatReadParameter();
  virtual ~MatReadParameter();

  MatReadParameter(const MatReadParameter& from);

  inline MatReadParameter& operator=(const MatReadParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatReadParameter(MatReadParameter&& from) noexcept
    : MatReadParameter() {
    *this = ::std::move(from);
  }

  inline MatReadParameter& operator=(MatReadParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatReadParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatReadParameter* internal_default_instance() {
    return reinterpret_cast<const MatReadParameter*>(
               &_MatReadParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(MatReadParameter* other);
  friend void swap(MatReadParameter& a, MatReadParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatReadParameter* New() const final {
    return CreateMaybeMessage<MatReadParameter>(NULL);
  }

  MatReadParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatReadParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatReadParameter& from);
  void MergeFrom(const MatReadParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatReadParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string prefix = 1;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional string source = 2 [default = ""];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int32 strip = 3 [default = 0];
  bool has_strip() const;
  void clear_strip();
  static const int kStripFieldNumber = 3;
  ::google::protobuf::int32 strip() const;
  void set_strip(::google::protobuf::int32 value);

  // optional int32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.MatReadParameter)
 private:
  void set_has_prefix();
  void clear_has_prefix();
  void set_has_source();
  void clear_has_source();
  void set_has_strip();
  void clear_has_strip();
  void set_has_batch_size();
  void clear_has_batch_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::int32 strip_;
  ::google::protobuf::int32 batch_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatWriteParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MatWriteParameter) */ {
 public:
  MatWriteParameter();
  virtual ~MatWriteParameter();

  MatWriteParameter(const MatWriteParameter& from);

  inline MatWriteParameter& operator=(const MatWriteParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatWriteParameter(MatWriteParameter&& from) noexcept
    : MatWriteParameter() {
    *this = ::std::move(from);
  }

  inline MatWriteParameter& operator=(MatWriteParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatWriteParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatWriteParameter* internal_default_instance() {
    return reinterpret_cast<const MatWriteParameter*>(
               &_MatWriteParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(MatWriteParameter* other);
  friend void swap(MatWriteParameter& a, MatWriteParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatWriteParameter* New() const final {
    return CreateMaybeMessage<MatWriteParameter>(NULL);
  }

  MatWriteParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatWriteParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatWriteParameter& from);
  void MergeFrom(const MatWriteParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatWriteParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string prefix = 1;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional string source = 2 [default = ""];
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int32 strip = 3 [default = 0];
  bool has_strip() const;
  void clear_strip();
  static const int kStripFieldNumber = 3;
  ::google::protobuf::int32 strip() const;
  void set_strip(::google::protobuf::int32 value);

  // optional int32 period = 4 [default = 1];
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 4;
  ::google::protobuf::int32 period() const;
  void set_period(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.MatWriteParameter)
 private:
  void set_has_prefix();
  void clear_has_prefix();
  void set_has_source();
  void clear_has_source();
  void set_has_strip();
  void clear_has_strip();
  void set_has_period();
  void clear_has_period();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::int32 strip_;
  ::google::protobuf::int32 period_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(MemoryDataParameter* other);
  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const final {
    return CreateMaybeMessage<MemoryDataParameter>(NULL);
  }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryDataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MVNParameter) */ {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVNParameter(MVNParameter&& from) noexcept
    : MVNParameter() {
    *this = ::std::move(from);
  }

  inline MVNParameter& operator=(MVNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(MVNParameter* other);
  friend void swap(MVNParameter& a, MVNParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const final {
    return CreateMaybeMessage<MVNParameter>(NULL);
  }

  MVNParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MVNParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MVNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  bool across_channels() const;
  void set_across_channels(bool value);

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  void set_has_normalize_variance();
  void clear_has_normalize_variance();
  void set_has_across_channels();
  void clear_has_across_channels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool across_channels_;
  bool normalize_variance_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneHotParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.OneHotParameter) */ {
 public:
  OneHotParameter();
  virtual ~OneHotParameter();

  OneHotParameter(const OneHotParameter& from);

  inline OneHotParameter& operator=(const OneHotParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneHotParameter(OneHotParameter&& from) noexcept
    : OneHotParameter() {
    *this = ::std::move(from);
  }

  inline OneHotParameter& operator=(OneHotParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneHotParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneHotParameter* internal_default_instance() {
    return reinterpret_cast<const OneHotParameter*>(
               &_OneHotParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(OneHotParameter* other);
  friend void swap(OneHotParameter& a, OneHotParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneHotParameter* New() const final {
    return CreateMaybeMessage<OneHotParameter>(NULL);
  }

  OneHotParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneHotParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneHotParameter& from);
  void MergeFrom(const OneHotParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneHotParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_labels = 1;
  bool has_num_labels() const;
  void clear_num_labels();
  static const int kNumLabelsFieldNumber = 1;
  ::google::protobuf::int32 num_labels() const;
  void set_num_labels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.OneHotParameter)
 private:
  void set_has_num_labels();
  void clear_has_num_labels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 num_labels_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PaddingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PaddingParameter) */ {
 public:
  PaddingParameter();
  virtual ~PaddingParameter();

  PaddingParameter(const PaddingParameter& from);

  inline PaddingParameter& operator=(const PaddingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PaddingParameter(PaddingParameter&& from) noexcept
    : PaddingParameter() {
    *this = ::std::move(from);
  }

  inline PaddingParameter& operator=(PaddingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaddingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaddingParameter* internal_default_instance() {
    return reinterpret_cast<const PaddingParameter*>(
               &_PaddingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(PaddingParameter* other);
  friend void swap(PaddingParameter& a, PaddingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PaddingParameter* New() const final {
    return CreateMaybeMessage<PaddingParameter>(NULL);
  }

  PaddingParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PaddingParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PaddingParameter& from);
  void MergeFrom(const PaddingParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaddingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pad_beg = 1 [default = 0];
  bool has_pad_beg() const;
  void clear_pad_beg();
  static const int kPadBegFieldNumber = 1;
  ::google::protobuf::int32 pad_beg() const;
  void set_pad_beg(::google::protobuf::int32 value);

  // optional int32 pad_end = 2 [default = 0];
  bool has_pad_end() const;
  void clear_pad_end();
  static const int kPadEndFieldNumber = 2;
  ::google::protobuf::int32 pad_end() const;
  void set_pad_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.PaddingParameter)
 private:
  void set_has_pad_beg();
  void clear_has_pad_beg();
  void set_has_pad_end();
  void clear_has_pad_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 pad_beg_;
  ::google::protobuf::int32 pad_end_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(PoolingParameter* other);
  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const final {
    return CreateMaybeMessage<PoolingParameter>(NULL);
  }

  PoolingParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoolingParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  void set_has_pool();
  void clear_has_pool();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_engine();
  void clear_has_engine();
  void set_has_global_pooling();
  void clear_has_global_pooling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int pool_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  int engine_;
  bool global_pooling_;
  ::google::protobuf::uint32 stride_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(PowerParameter* other);
  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const final {
    return CreateMaybeMessage<PowerParameter>(NULL);
  }

  PowerParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PowerParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power() const;
  void set_power(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  void set_has_power();
  void clear_has_power();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(ReLUParameter* other);
  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const final {
    return CreateMaybeMessage<ReLUParameter>(NULL);
  }

  ReLUParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReLUParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  void set_has_negative_slope();
  void clear_has_negative_slope();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float negative_slope_;
  int engine_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(SigmoidParameter* other);
  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const final {
    return CreateMaybeMessage<SigmoidParameter>(NULL);
  }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SigmoidParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigmoidParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int engine_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SliceParameter) */ {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SliceParameter(SliceParameter&& from) noexcept
    : SliceParameter() {
    *this = ::std::move(from);
  }

  inline SliceParameter& operator=(SliceParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(SliceParameter* other);
  friend void swap(SliceParameter& a, SliceParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const final {
    return CreateMaybeMessage<SliceParameter>(NULL);
  }

  SliceParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SliceParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  ::google::protobuf::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::google::protobuf::uint32 value);
  void add_slice_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  ::google::protobuf::uint32 slice_dim() const;
  void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  void set_has_slice_dim();
  void clear_has_slice_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::uint32 slice_dim_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftmaxParameter(SoftmaxParameter&& from) noexcept
    : SoftmaxParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxParameter& operator=(SoftmaxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(SoftmaxParameter* other);
  friend void swap(SoftmaxParameter& a, SoftmaxParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const final {
    return CreateMaybeMessage<SoftmaxParameter>(NULL);
  }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SoftmaxParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::caffe::SoftmaxParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int engine_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TanHParameter) */ {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TanHParameter(TanHParameter&& from) noexcept
    : TanHParameter() {
    *this = ::std::move(from);
  }

  inline TanHParameter& operator=(TanHParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(TanHParameter* other);
  friend void swap(TanHParameter& a, TanHParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const final {
    return CreateMaybeMessage<TanHParameter>(NULL);
  }

  TanHParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TanHParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TanHParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static const Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::TanHParameter_Engine engine() const;
  void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int engine_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ThresholdParameter) */ {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThresholdParameter(ThresholdParameter&& from) noexcept
    : ThresholdParameter() {
    *this = ::std::move(from);
  }

  inline ThresholdParameter& operator=(ThresholdParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ThresholdParameter* other);
  friend void swap(ThresholdParameter& a, ThresholdParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const final {
    return CreateMaybeMessage<ThresholdParameter>(NULL);
  }

  ThresholdParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThresholdParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  void set_has_threshold();
  void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float threshold_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(WindowDataParameter* other);
  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const final {
    return CreateMaybeMessage<WindowDataParameter>(NULL);
  }

  WindowDataParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WindowDataParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  const ::std::string& crop_mode() const;
  void set_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_crop_mode(::std::string&& value);
  #endif
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  ::std::string* mutable_crop_mode();
  ::std::string* release_crop_mode();
  void set_allocated_crop_mode(::std::string* crop_mode);

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  bool cache_images() const;
  void set_cache_images(bool value);

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  ::google::protobuf::uint32 context_pad() const;
  void set_context_pad(::google::protobuf::uint32 value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_fg_threshold();
  void clear_has_fg_threshold();
  void set_has_bg_threshold();
  void clear_has_bg_threshold();
  void set_has_fg_fraction();
  void clear_has_fg_fraction();
  void set_has_context_pad();
  void clear_has_context_pad();
  void set_has_crop_mode();
  void clear_has_crop_mode();
  void set_has_cache_images();
  void clear_has_cache_images();
  void set_has_root_folder();
  void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_crop_mode_;
  private:
  ::google::protobuf::internal::ArenaStringPtr crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UniqueLabelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.UniqueLabelParameter) */ {
 public:
  UniqueLabelParameter();
  virtual ~UniqueLabelParameter();

  UniqueLabelParameter(const UniqueLabelParameter& from);

  inline UniqueLabelParameter& operator=(const UniqueLabelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UniqueLabelParameter(UniqueLabelParameter&& from) noexcept
    : UniqueLabelParameter() {
    *this = ::std::move(from);
  }

  inline UniqueLabelParameter& operator=(UniqueLabelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueLabelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniqueLabelParameter* internal_default_instance() {
    return reinterpret_cast<const UniqueLabelParameter*>(
               &_UniqueLabelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(UniqueLabelParameter* other);
  friend void swap(UniqueLabelParameter& a, UniqueLabelParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UniqueLabelParameter* New() const final {
    return CreateMaybeMessage<UniqueLabelParameter>(NULL);
  }

  UniqueLabelParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UniqueLabelParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UniqueLabelParameter& from);
  void MergeFrom(const UniqueLabelParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniqueLabelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ignore_label = 2;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 2;
  float ignore_label(int index) const;
  void set_ignore_label(int index, float value);
  void add_ignore_label(float value);
  const ::google::protobuf::RepeatedField< float >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ignore_label();

  // repeated float force_label = 3;
  int force_label_size() const;
  void clear_force_label();
  static const int kForceLabelFieldNumber = 3;
  float force_label(int index) const;
  void set_force_label(int index, float value);
  void add_force_label(float value);
  const ::google::protobuf::RepeatedField< float >&
      force_label() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_force_label();

  // required int32 max_labels = 1;
  bool has_max_labels() const;
  void clear_max_labels();
  static const int kMaxLabelsFieldNumber = 1;
  ::google::protobuf::int32 max_labels() const;
  void set_max_labels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.UniqueLabelParameter)
 private:
  void set_has_max_labels();
  void clear_has_max_labels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > ignore_label_;
  ::google::protobuf::RepeatedField< float > force_label_;
  ::google::protobuf::int32 max_labels_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(V0LayerParameter* other);
  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const final {
    return CreateMaybeMessage<V0LayerParameter>(NULL);
  }

  V0LayerParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V0LayerParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V0LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  #if LANG_CXX11
  void set_meanfile(::std::string&& value);
  #endif
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  const ::std::string& det_crop_mode() const;
  void set_det_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_det_crop_mode(::std::string&& value);
  #endif
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  ::std::string* mutable_det_crop_mode();
  ::std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  private:
  const ::caffe::FillerParameter& _internal_weight_filler() const;
  public:
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  private:
  const ::caffe::FillerParameter& _internal_bias_filler() const;
  public:
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  private:
  const ::caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  public:
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  ::google::protobuf::uint32 kernelsize() const;
  void set_kernelsize(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 11;
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  ::google::protobuf::uint32 batchsize() const;
  void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  ::google::protobuf::uint32 cropsize() const;
  void set_cropsize(::google::protobuf::uint32 value);

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  ::google::protobuf::int32 new_width() const;
  void set_new_width(::google::protobuf::int32 value);

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  ::google::protobuf::uint32 det_context_pad() const;
  void set_det_context_pad(::google::protobuf::uint32 value);

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  ::google::protobuf::int32 new_num() const;
  void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  ::google::protobuf::int32 new_channels() const;
  void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  ::google::protobuf::int32 new_height() const;
  void set_new_height(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  bool biasterm() const;
  void set_biasterm(bool value);

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 9;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 10;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 15;
  float beta() const;
  void set_beta(float value);

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 17;
  float scale() const;
  void set_scale(float value);

  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 22;
  float k() const;
  void set_k(float value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_biasterm();
  void clear_has_biasterm();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_pad();
  void clear_has_pad();
  void set_has_kernelsize();
  void clear_has_kernelsize();
  void set_has_group();
  void clear_has_group();
  void set_has_stride();
  void clear_has_stride();
  void set_has_pool();
  void clear_has_pool();
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_k();
  void clear_has_k();
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_meanfile();
  void clear_has_meanfile();
  void set_has_batchsize();
  void clear_has_batchsize();
  void set_has_cropsize();
  void clear_has_cropsize();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_det_fg_threshold();
  void clear_has_det_fg_threshold();
  void set_has_det_bg_threshold();
  void clear_has_det_bg_threshold();
  void set_has_det_fg_fraction();
  void clear_has_det_fg_fraction();
  void set_has_det_context_pad();
  void clear_has_det_context_pad();
  void set_has_det_crop_mode();
  void clear_has_det_crop_mode();
  void set_has_new_num();
  void clear_has_new_num();
  void set_has_new_channels();
  void clear_has_new_channels();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_shuffle_images();
  void clear_has_shuffle_images();
  void set_has_concat_dim();
  void clear_has_concat_dim();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_det_crop_mode_;
  private:
  ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernelsize_;
  int pool_;
  ::google::protobuf::uint32 batchsize_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::int32 new_width_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 det_context_pad_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::uint32 concat_dim_;
  bool biasterm_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float scale_;
  float k_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_caffe_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobProto

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
inline void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::caffe::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
inline void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated .caffe.LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline ::caffe::LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::caffe::LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetParameter::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#if LANG_CXX11
inline void NetParameter::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#endif
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::_internal_state() const {
  return *state_;
}
inline const ::caffe::NetState& NetParameter::state() const {
  const ::caffe::NetState* p = state_;
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::NetState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
inline void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
inline void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  if (!has_net()) {
    return NULL;
  }
  clear_has_net();
  return net_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::_internal_net_param() const {
  return *net_param_;
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  const ::caffe::NetParameter* p = net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::NetParameter>(GetArenaNoVirtual());
    net_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete net_param_;
  }
  if (net_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      net_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena();
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
#if LANG_CXX11
inline void SolverParameter::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
#endif
inline void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  if (!has_train_net()) {
    return NULL;
  }
  clear_has_train_net();
  return train_net_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SolverParameter::set_test_net(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
inline void SolverParameter::add_test_net(::std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#endif
inline void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::_internal_train_net_param() const {
  return *train_net_param_;
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  const ::caffe::NetParameter* p = train_net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::NetParameter>(GetArenaNoVirtual());
    train_net_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete train_net_param_;
  }
  if (train_net_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      train_net_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, train_net_param, submessage_arena);
    }
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  train_net_param_ = train_net_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::_internal_train_state() const {
  return *train_state_;
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  const ::caffe::NetState* p = train_state_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::NetState>(GetArenaNoVirtual());
    train_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete train_state_;
  }
  if (train_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      train_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, train_state, submessage_arena);
    }
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  train_state_ = train_state;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena();
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
#if LANG_CXX11
inline void SolverParameter::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
#endif
inline void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  if (!has_lr_policy()) {
    return NULL;
  }
  clear_has_lr_policy();
  return lr_policy_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena();
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
#if LANG_CXX11
inline void SolverParameter::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.regularization_type)
}
#endif
inline void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  if (!has_regularization_type()) {
    return NULL;
  }
  clear_has_regularization_type();
  return regularization_type_.ReleaseNonDefaultNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&::caffe::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
inline void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  if (!has_snapshot_prefix()) {
    return NULL;
  }
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
inline void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
inline void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  if (!has_learned_net()) {
    return NULL;
  }
  clear_has_learned_net();
  return learned_net_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetState::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#if LANG_CXX11
inline void NetState::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#endif
inline void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#if LANG_CXX11
inline void NetStateRule::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#endif
inline void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_not_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#if LANG_CXX11
inline void NetStateRule::add_not_stage(::std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#endif
inline void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// LayerParameter

// repeated string bottom = 2;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
inline void LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#endif
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#if LANG_CXX11
inline void LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#endif
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
inline void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.LayerParameter.LayerType type = 5;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::LayerParameter_LayerType LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return static_cast< ::caffe::LayerParameter_LayerType >(type_);
}
inline void LayerParameter::set_type(::caffe::LayerParameter_LayerType value) {
  assert(::caffe::LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline void LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.param)
}
inline void LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.param)
}
inline ::std::string* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.param)
  return param_.Add();
}
inline void LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
}
#if LANG_CXX11
inline void LayerParameter::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
}
#endif
inline void LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.param)
}
inline void LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}

// repeated .caffe.LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::LayerParameter_DimCheckMode LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blob_share_mode)
  return static_cast< ::caffe::LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void LayerParameter::set_blob_share_mode(int index, ::caffe::LayerParameter_DimCheckMode value) {
  assert(::caffe::LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.blob_share_mode)
}
inline void LayerParameter::add_blob_share_mode(::caffe::LayerParameter_DimCheckMode value) {
  assert(::caffe::LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// optional bool strict_dim = 1003 [default = true];
inline bool LayerParameter::has_strict_dim() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_strict_dim() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_strict_dim() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_strict_dim() {
  strict_dim_ = true;
  clear_has_strict_dim();
}
inline bool LayerParameter::strict_dim() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.strict_dim)
  return strict_dim_;
}
inline void LayerParameter::set_strict_dim(bool value) {
  set_has_strict_dim();
  strict_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.strict_dim)
}

// repeated float blobs_lr = 7;
inline int LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.blobs_lr)
}
inline void LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.weight_decay)
}
inline void LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::_internal_accuracy_param() const {
  return *accuracy_param_;
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  const ::caffe::AccuracyParameter* p = accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AccuracyParameter*>(
      &::caffe::_AccuracyParameter_default_instance_);
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::AccuracyParameter>(GetArenaNoVirtual());
    accuracy_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accuracy_param_;
  }
  if (accuracy_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accuracy_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.AdaptiveBiasChannelParameter adaptive_bias_channel_param = 53;
inline bool LayerParameter::has_adaptive_bias_channel_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_adaptive_bias_channel_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_adaptive_bias_channel_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_adaptive_bias_channel_param() {
  if (adaptive_bias_channel_param_ != NULL) adaptive_bias_channel_param_->Clear();
  clear_has_adaptive_bias_channel_param();
}
inline const ::caffe::AdaptiveBiasChannelParameter& LayerParameter::_internal_adaptive_bias_channel_param() const {
  return *adaptive_bias_channel_param_;
}
inline const ::caffe::AdaptiveBiasChannelParameter& LayerParameter::adaptive_bias_channel_param() const {
  const ::caffe::AdaptiveBiasChannelParameter* p = adaptive_bias_channel_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.adaptive_bias_channel_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AdaptiveBiasChannelParameter*>(
      &::caffe::_AdaptiveBiasChannelParameter_default_instance_);
}
inline ::caffe::AdaptiveBiasChannelParameter* LayerParameter::release_adaptive_bias_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.adaptive_bias_channel_param)
  clear_has_adaptive_bias_channel_param();
  ::caffe::AdaptiveBiasChannelParameter* temp = adaptive_bias_channel_param_;
  adaptive_bias_channel_param_ = NULL;
  return temp;
}
inline ::caffe::AdaptiveBiasChannelParameter* LayerParameter::mutable_adaptive_bias_channel_param() {
  set_has_adaptive_bias_channel_param();
  if (adaptive_bias_channel_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::AdaptiveBiasChannelParameter>(GetArenaNoVirtual());
    adaptive_bias_channel_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.adaptive_bias_channel_param)
  return adaptive_bias_channel_param_;
}
inline void LayerParameter::set_allocated_adaptive_bias_channel_param(::caffe::AdaptiveBiasChannelParameter* adaptive_bias_channel_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adaptive_bias_channel_param_;
  }
  if (adaptive_bias_channel_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      adaptive_bias_channel_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adaptive_bias_channel_param, submessage_arena);
    }
    set_has_adaptive_bias_channel_param();
  } else {
    clear_has_adaptive_bias_channel_param();
  }
  adaptive_bias_channel_param_ = adaptive_bias_channel_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.adaptive_bias_channel_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::_internal_argmax_param() const {
  return *argmax_param_;
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  const ::caffe::ArgMaxParameter* p = argmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ArgMaxParameter*>(
      &::caffe::_ArgMaxParameter_default_instance_);
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ArgMaxParameter>(GetArenaNoVirtual());
    argmax_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete argmax_param_;
  }
  if (argmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      argmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BiasChannelParameter bias_channel_param = 50;
inline bool LayerParameter::has_bias_channel_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_bias_channel_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_bias_channel_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_bias_channel_param() {
  if (bias_channel_param_ != NULL) bias_channel_param_->Clear();
  clear_has_bias_channel_param();
}
inline const ::caffe::BiasChannelParameter& LayerParameter::_internal_bias_channel_param() const {
  return *bias_channel_param_;
}
inline const ::caffe::BiasChannelParameter& LayerParameter::bias_channel_param() const {
  const ::caffe::BiasChannelParameter* p = bias_channel_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_channel_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BiasChannelParameter*>(
      &::caffe::_BiasChannelParameter_default_instance_);
}
inline ::caffe::BiasChannelParameter* LayerParameter::release_bias_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_channel_param)
  clear_has_bias_channel_param();
  ::caffe::BiasChannelParameter* temp = bias_channel_param_;
  bias_channel_param_ = NULL;
  return temp;
}
inline ::caffe::BiasChannelParameter* LayerParameter::mutable_bias_channel_param() {
  set_has_bias_channel_param();
  if (bias_channel_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::BiasChannelParameter>(GetArenaNoVirtual());
    bias_channel_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_channel_param)
  return bias_channel_param_;
}
inline void LayerParameter::set_allocated_bias_channel_param(::caffe::BiasChannelParameter* bias_channel_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_channel_param_;
  }
  if (bias_channel_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_channel_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_channel_param, submessage_arena);
    }
    set_has_bias_channel_param();
  } else {
    clear_has_bias_channel_param();
  }
  bias_channel_param_ = bias_channel_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_channel_param)
}

// optional .caffe.CensorLabelParameter censor_label_param = 52;
inline bool LayerParameter::has_censor_label_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_censor_label_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_censor_label_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_censor_label_param() {
  if (censor_label_param_ != NULL) censor_label_param_->Clear();
  clear_has_censor_label_param();
}
inline const ::caffe::CensorLabelParameter& LayerParameter::_internal_censor_label_param() const {
  return *censor_label_param_;
}
inline const ::caffe::CensorLabelParameter& LayerParameter::censor_label_param() const {
  const ::caffe::CensorLabelParameter* p = censor_label_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.censor_label_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::CensorLabelParameter*>(
      &::caffe::_CensorLabelParameter_default_instance_);
}
inline ::caffe::CensorLabelParameter* LayerParameter::release_censor_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.censor_label_param)
  clear_has_censor_label_param();
  ::caffe::CensorLabelParameter* temp = censor_label_param_;
  censor_label_param_ = NULL;
  return temp;
}
inline ::caffe::CensorLabelParameter* LayerParameter::mutable_censor_label_param() {
  set_has_censor_label_param();
  if (censor_label_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::CensorLabelParameter>(GetArenaNoVirtual());
    censor_label_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.censor_label_param)
  return censor_label_param_;
}
inline void LayerParameter::set_allocated_censor_label_param(::caffe::CensorLabelParameter* censor_label_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete censor_label_param_;
  }
  if (censor_label_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      censor_label_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, censor_label_param, submessage_arena);
    }
    set_has_censor_label_param();
  } else {
    clear_has_censor_label_param();
  }
  censor_label_param_ = censor_label_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.censor_label_param)
}

// optional .caffe.ChannelAggregatorParameter channel_aggregator_param = 54;
inline bool LayerParameter::has_channel_aggregator_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_channel_aggregator_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_channel_aggregator_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_channel_aggregator_param() {
  if (channel_aggregator_param_ != NULL) channel_aggregator_param_->Clear();
  clear_has_channel_aggregator_param();
}
inline const ::caffe::ChannelAggregatorParameter& LayerParameter::_internal_channel_aggregator_param() const {
  return *channel_aggregator_param_;
}
inline const ::caffe::ChannelAggregatorParameter& LayerParameter::channel_aggregator_param() const {
  const ::caffe::ChannelAggregatorParameter* p = channel_aggregator_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.channel_aggregator_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ChannelAggregatorParameter*>(
      &::caffe::_ChannelAggregatorParameter_default_instance_);
}
inline ::caffe::ChannelAggregatorParameter* LayerParameter::release_channel_aggregator_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.channel_aggregator_param)
  clear_has_channel_aggregator_param();
  ::caffe::ChannelAggregatorParameter* temp = channel_aggregator_param_;
  channel_aggregator_param_ = NULL;
  return temp;
}
inline ::caffe::ChannelAggregatorParameter* LayerParameter::mutable_channel_aggregator_param() {
  set_has_channel_aggregator_param();
  if (channel_aggregator_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ChannelAggregatorParameter>(GetArenaNoVirtual());
    channel_aggregator_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.channel_aggregator_param)
  return channel_aggregator_param_;
}
inline void LayerParameter::set_allocated_channel_aggregator_param(::caffe::ChannelAggregatorParameter* channel_aggregator_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_aggregator_param_;
  }
  if (channel_aggregator_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_aggregator_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_aggregator_param, submessage_arena);
    }
    set_has_channel_aggregator_param();
  } else {
    clear_has_channel_aggregator_param();
  }
  channel_aggregator_param_ = channel_aggregator_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.channel_aggregator_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::_internal_concat_param() const {
  return *concat_param_;
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ConcatParameter>(GetArenaNoVirtual());
    concat_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete concat_param_;
  }
  if (concat_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      concat_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::_internal_contrastive_loss_param() const {
  return *contrastive_loss_param_;
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  const ::caffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ContrastiveLossParameter*>(
      &::caffe::_ContrastiveLossParameter_default_instance_);
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ContrastiveLossParameter>(GetArenaNoVirtual());
    contrastive_loss_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::_internal_convolution_param() const {
  return *convolution_param_;
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ConvolutionParameter>(GetArenaNoVirtual());
    convolution_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      convolution_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::_internal_data_param() const {
  return *data_param_;
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::DataParameter>(GetArenaNoVirtual());
    data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_param_;
  }
  if (data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DenseCRFParameter dense_crf_param = 48;
inline bool LayerParameter::has_dense_crf_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_dense_crf_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_dense_crf_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_dense_crf_param() {
  if (dense_crf_param_ != NULL) dense_crf_param_->Clear();
  clear_has_dense_crf_param();
}
inline const ::caffe::DenseCRFParameter& LayerParameter::_internal_dense_crf_param() const {
  return *dense_crf_param_;
}
inline const ::caffe::DenseCRFParameter& LayerParameter::dense_crf_param() const {
  const ::caffe::DenseCRFParameter* p = dense_crf_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dense_crf_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DenseCRFParameter*>(
      &::caffe::_DenseCRFParameter_default_instance_);
}
inline ::caffe::DenseCRFParameter* LayerParameter::release_dense_crf_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dense_crf_param)
  clear_has_dense_crf_param();
  ::caffe::DenseCRFParameter* temp = dense_crf_param_;
  dense_crf_param_ = NULL;
  return temp;
}
inline ::caffe::DenseCRFParameter* LayerParameter::mutable_dense_crf_param() {
  set_has_dense_crf_param();
  if (dense_crf_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::DenseCRFParameter>(GetArenaNoVirtual());
    dense_crf_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dense_crf_param)
  return dense_crf_param_;
}
inline void LayerParameter::set_allocated_dense_crf_param(::caffe::DenseCRFParameter* dense_crf_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dense_crf_param_;
  }
  if (dense_crf_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dense_crf_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dense_crf_param, submessage_arena);
    }
    set_has_dense_crf_param();
  } else {
    clear_has_dense_crf_param();
  }
  dense_crf_param_ = dense_crf_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dense_crf_param)
}

// optional .caffe.DominantChannelParameter dominant_channel_param = 49;
inline bool LayerParameter::has_dominant_channel_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_dominant_channel_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_dominant_channel_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_dominant_channel_param() {
  if (dominant_channel_param_ != NULL) dominant_channel_param_->Clear();
  clear_has_dominant_channel_param();
}
inline const ::caffe::DominantChannelParameter& LayerParameter::_internal_dominant_channel_param() const {
  return *dominant_channel_param_;
}
inline const ::caffe::DominantChannelParameter& LayerParameter::dominant_channel_param() const {
  const ::caffe::DominantChannelParameter* p = dominant_channel_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dominant_channel_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DominantChannelParameter*>(
      &::caffe::_DominantChannelParameter_default_instance_);
}
inline ::caffe::DominantChannelParameter* LayerParameter::release_dominant_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dominant_channel_param)
  clear_has_dominant_channel_param();
  ::caffe::DominantChannelParameter* temp = dominant_channel_param_;
  dominant_channel_param_ = NULL;
  return temp;
}
inline ::caffe::DominantChannelParameter* LayerParameter::mutable_dominant_channel_param() {
  set_has_dominant_channel_param();
  if (dominant_channel_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::DominantChannelParameter>(GetArenaNoVirtual());
    dominant_channel_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dominant_channel_param)
  return dominant_channel_param_;
}
inline void LayerParameter::set_allocated_dominant_channel_param(::caffe::DominantChannelParameter* dominant_channel_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dominant_channel_param_;
  }
  if (dominant_channel_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dominant_channel_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dominant_channel_param, submessage_arena);
    }
    set_has_dominant_channel_param();
  } else {
    clear_has_dominant_channel_param();
  }
  dominant_channel_param_ = dominant_channel_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dominant_channel_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::_internal_dropout_param() const {
  return *dropout_param_;
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::DropoutParameter>(GetArenaNoVirtual());
    dropout_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropout_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::_internal_dummy_data_param() const {
  return *dummy_data_param_;
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  const ::caffe::DummyDataParameter* p = dummy_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DummyDataParameter*>(
      &::caffe::_DummyDataParameter_default_instance_);
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::DummyDataParameter>(GetArenaNoVirtual());
    dummy_data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dummy_data_param_;
  }
  if (dummy_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dummy_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::_internal_eltwise_param() const {
  return *eltwise_param_;
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  const ::caffe::EltwiseParameter* p = eltwise_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseParameter*>(
      &::caffe::_EltwiseParameter_default_instance_);
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::EltwiseParameter>(GetArenaNoVirtual());
    eltwise_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_param_;
  }
  if (eltwise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.EuclideanLossParameter euclidean_loss_param = 57;
inline bool LayerParameter::has_euclidean_loss_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_euclidean_loss_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_euclidean_loss_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_euclidean_loss_param() {
  if (euclidean_loss_param_ != NULL) euclidean_loss_param_->Clear();
  clear_has_euclidean_loss_param();
}
inline const ::caffe::EuclideanLossParameter& LayerParameter::_internal_euclidean_loss_param() const {
  return *euclidean_loss_param_;
}
inline const ::caffe::EuclideanLossParameter& LayerParameter::euclidean_loss_param() const {
  const ::caffe::EuclideanLossParameter* p = euclidean_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.euclidean_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EuclideanLossParameter*>(
      &::caffe::_EuclideanLossParameter_default_instance_);
}
inline ::caffe::EuclideanLossParameter* LayerParameter::release_euclidean_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.euclidean_loss_param)
  clear_has_euclidean_loss_param();
  ::caffe::EuclideanLossParameter* temp = euclidean_loss_param_;
  euclidean_loss_param_ = NULL;
  return temp;
}
inline ::caffe::EuclideanLossParameter* LayerParameter::mutable_euclidean_loss_param() {
  set_has_euclidean_loss_param();
  if (euclidean_loss_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::EuclideanLossParameter>(GetArenaNoVirtual());
    euclidean_loss_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.euclidean_loss_param)
  return euclidean_loss_param_;
}
inline void LayerParameter::set_allocated_euclidean_loss_param(::caffe::EuclideanLossParameter* euclidean_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete euclidean_loss_param_;
  }
  if (euclidean_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      euclidean_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, euclidean_loss_param, submessage_arena);
    }
    set_has_euclidean_loss_param();
  } else {
    clear_has_euclidean_loss_param();
  }
  euclidean_loss_param_ = euclidean_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.euclidean_loss_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::_internal_exp_param() const {
  return *exp_param_;
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  const ::caffe::ExpParameter* p = exp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ExpParameter*>(
      &::caffe::_ExpParameter_default_instance_);
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ExpParameter>(GetArenaNoVirtual());
    exp_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exp_param_;
  }
  if (exp_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.GainChannelParameter gain_channel_param = 58;
inline bool LayerParameter::has_gain_channel_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_gain_channel_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_gain_channel_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_gain_channel_param() {
  if (gain_channel_param_ != NULL) gain_channel_param_->Clear();
  clear_has_gain_channel_param();
}
inline const ::caffe::GainChannelParameter& LayerParameter::_internal_gain_channel_param() const {
  return *gain_channel_param_;
}
inline const ::caffe::GainChannelParameter& LayerParameter::gain_channel_param() const {
  const ::caffe::GainChannelParameter* p = gain_channel_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gain_channel_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GainChannelParameter*>(
      &::caffe::_GainChannelParameter_default_instance_);
}
inline ::caffe::GainChannelParameter* LayerParameter::release_gain_channel_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gain_channel_param)
  clear_has_gain_channel_param();
  ::caffe::GainChannelParameter* temp = gain_channel_param_;
  gain_channel_param_ = NULL;
  return temp;
}
inline ::caffe::GainChannelParameter* LayerParameter::mutable_gain_channel_param() {
  set_has_gain_channel_param();
  if (gain_channel_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::GainChannelParameter>(GetArenaNoVirtual());
    gain_channel_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gain_channel_param)
  return gain_channel_param_;
}
inline void LayerParameter::set_allocated_gain_channel_param(::caffe::GainChannelParameter* gain_channel_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gain_channel_param_;
  }
  if (gain_channel_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gain_channel_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gain_channel_param, submessage_arena);
    }
    set_has_gain_channel_param();
  } else {
    clear_has_gain_channel_param();
  }
  gain_channel_param_ = gain_channel_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gain_channel_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::_internal_hdf5_data_param() const {
  return *hdf5_data_param_;
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::HDF5DataParameter>(GetArenaNoVirtual());
    hdf5_data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::_internal_hdf5_output_param() const {
  return *hdf5_output_param_;
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::HDF5OutputParameter>(GetArenaNoVirtual());
    hdf5_output_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::_internal_hinge_loss_param() const {
  return *hinge_loss_param_;
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  const ::caffe::HingeLossParameter* p = hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HingeLossParameter*>(
      &::caffe::_HingeLossParameter_default_instance_);
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::HingeLossParameter>(GetArenaNoVirtual());
    hinge_loss_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.HistogramParameter histogram_param = 56;
inline bool LayerParameter::has_histogram_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_histogram_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_histogram_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_histogram_param() {
  if (histogram_param_ != NULL) histogram_param_->Clear();
  clear_has_histogram_param();
}
inline const ::caffe::HistogramParameter& LayerParameter::_internal_histogram_param() const {
  return *histogram_param_;
}
inline const ::caffe::HistogramParameter& LayerParameter::histogram_param() const {
  const ::caffe::HistogramParameter* p = histogram_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.histogram_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HistogramParameter*>(
      &::caffe::_HistogramParameter_default_instance_);
}
inline ::caffe::HistogramParameter* LayerParameter::release_histogram_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.histogram_param)
  clear_has_histogram_param();
  ::caffe::HistogramParameter* temp = histogram_param_;
  histogram_param_ = NULL;
  return temp;
}
inline ::caffe::HistogramParameter* LayerParameter::mutable_histogram_param() {
  set_has_histogram_param();
  if (histogram_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::HistogramParameter>(GetArenaNoVirtual());
    histogram_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.histogram_param)
  return histogram_param_;
}
inline void LayerParameter::set_allocated_histogram_param(::caffe::HistogramParameter* histogram_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete histogram_param_;
  }
  if (histogram_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      histogram_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, histogram_param, submessage_arena);
    }
    set_has_histogram_param();
  } else {
    clear_has_histogram_param();
  }
  histogram_param_ = histogram_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.histogram_param)
}

// optional .caffe.IgnoreOverlayParameter ignore_overlay_param = 55;
inline bool LayerParameter::has_ignore_overlay_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_ignore_overlay_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_ignore_overlay_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_ignore_overlay_param() {
  if (ignore_overlay_param_ != NULL) ignore_overlay_param_->Clear();
  clear_has_ignore_overlay_param();
}
inline const ::caffe::IgnoreOverlayParameter& LayerParameter::_internal_ignore_overlay_param() const {
  return *ignore_overlay_param_;
}
inline const ::caffe::IgnoreOverlayParameter& LayerParameter::ignore_overlay_param() const {
  const ::caffe::IgnoreOverlayParameter* p = ignore_overlay_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.ignore_overlay_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::IgnoreOverlayParameter*>(
      &::caffe::_IgnoreOverlayParameter_default_instance_);
}
inline ::caffe::IgnoreOverlayParameter* LayerParameter::release_ignore_overlay_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.ignore_overlay_param)
  clear_has_ignore_overlay_param();
  ::caffe::IgnoreOverlayParameter* temp = ignore_overlay_param_;
  ignore_overlay_param_ = NULL;
  return temp;
}
inline ::caffe::IgnoreOverlayParameter* LayerParameter::mutable_ignore_overlay_param() {
  set_has_ignore_overlay_param();
  if (ignore_overlay_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::IgnoreOverlayParameter>(GetArenaNoVirtual());
    ignore_overlay_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.ignore_overlay_param)
  return ignore_overlay_param_;
}
inline void LayerParameter::set_allocated_ignore_overlay_param(::caffe::IgnoreOverlayParameter* ignore_overlay_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ignore_overlay_param_;
  }
  if (ignore_overlay_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ignore_overlay_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ignore_overlay_param, submessage_arena);
    }
    set_has_ignore_overlay_param();
  } else {
    clear_has_ignore_overlay_param();
  }
  ignore_overlay_param_ = ignore_overlay_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.ignore_overlay_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::_internal_image_data_param() const {
  return *image_data_param_;
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ImageDataParameter>(GetArenaNoVirtual());
    image_data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::_internal_infogain_loss_param() const {
  return *infogain_loss_param_;
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::InfogainLossParameter>(GetArenaNoVirtual());
    infogain_loss_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::_internal_inner_product_param() const {
  return *inner_product_param_;
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::InnerProductParameter>(GetArenaNoVirtual());
    inner_product_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InterpParameter interp_param = 43;
inline bool LayerParameter::has_interp_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_interp_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_interp_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_interp_param() {
  if (interp_param_ != NULL) interp_param_->Clear();
  clear_has_interp_param();
}
inline const ::caffe::InterpParameter& LayerParameter::_internal_interp_param() const {
  return *interp_param_;
}
inline const ::caffe::InterpParameter& LayerParameter::interp_param() const {
  const ::caffe::InterpParameter* p = interp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.interp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InterpParameter*>(
      &::caffe::_InterpParameter_default_instance_);
}
inline ::caffe::InterpParameter* LayerParameter::release_interp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.interp_param)
  clear_has_interp_param();
  ::caffe::InterpParameter* temp = interp_param_;
  interp_param_ = NULL;
  return temp;
}
inline ::caffe::InterpParameter* LayerParameter::mutable_interp_param() {
  set_has_interp_param();
  if (interp_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::InterpParameter>(GetArenaNoVirtual());
    interp_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.interp_param)
  return interp_param_;
}
inline void LayerParameter::set_allocated_interp_param(::caffe::InterpParameter* interp_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete interp_param_;
  }
  if (interp_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interp_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interp_param, submessage_arena);
    }
    set_has_interp_param();
  } else {
    clear_has_interp_param();
  }
  interp_param_ = interp_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.interp_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::_internal_lrn_param() const {
  return *lrn_param_;
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::LRNParameter>(GetArenaNoVirtual());
    lrn_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lrn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MatReadParameter mat_read_param = 47;
inline bool LayerParameter::has_mat_read_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_mat_read_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_mat_read_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_mat_read_param() {
  if (mat_read_param_ != NULL) mat_read_param_->Clear();
  clear_has_mat_read_param();
}
inline const ::caffe::MatReadParameter& LayerParameter::_internal_mat_read_param() const {
  return *mat_read_param_;
}
inline const ::caffe::MatReadParameter& LayerParameter::mat_read_param() const {
  const ::caffe::MatReadParameter* p = mat_read_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mat_read_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MatReadParameter*>(
      &::caffe::_MatReadParameter_default_instance_);
}
inline ::caffe::MatReadParameter* LayerParameter::release_mat_read_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mat_read_param)
  clear_has_mat_read_param();
  ::caffe::MatReadParameter* temp = mat_read_param_;
  mat_read_param_ = NULL;
  return temp;
}
inline ::caffe::MatReadParameter* LayerParameter::mutable_mat_read_param() {
  set_has_mat_read_param();
  if (mat_read_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::MatReadParameter>(GetArenaNoVirtual());
    mat_read_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mat_read_param)
  return mat_read_param_;
}
inline void LayerParameter::set_allocated_mat_read_param(::caffe::MatReadParameter* mat_read_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mat_read_param_;
  }
  if (mat_read_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mat_read_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mat_read_param, submessage_arena);
    }
    set_has_mat_read_param();
  } else {
    clear_has_mat_read_param();
  }
  mat_read_param_ = mat_read_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mat_read_param)
}

// optional .caffe.MatWriteParameter mat_write_param = 46;
inline bool LayerParameter::has_mat_write_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_mat_write_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_mat_write_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_mat_write_param() {
  if (mat_write_param_ != NULL) mat_write_param_->Clear();
  clear_has_mat_write_param();
}
inline const ::caffe::MatWriteParameter& LayerParameter::_internal_mat_write_param() const {
  return *mat_write_param_;
}
inline const ::caffe::MatWriteParameter& LayerParameter::mat_write_param() const {
  const ::caffe::MatWriteParameter* p = mat_write_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mat_write_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MatWriteParameter*>(
      &::caffe::_MatWriteParameter_default_instance_);
}
inline ::caffe::MatWriteParameter* LayerParameter::release_mat_write_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mat_write_param)
  clear_has_mat_write_param();
  ::caffe::MatWriteParameter* temp = mat_write_param_;
  mat_write_param_ = NULL;
  return temp;
}
inline ::caffe::MatWriteParameter* LayerParameter::mutable_mat_write_param() {
  set_has_mat_write_param();
  if (mat_write_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::MatWriteParameter>(GetArenaNoVirtual());
    mat_write_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mat_write_param)
  return mat_write_param_;
}
inline void LayerParameter::set_allocated_mat_write_param(::caffe::MatWriteParameter* mat_write_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mat_write_param_;
  }
  if (mat_write_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mat_write_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mat_write_param, submessage_arena);
    }
    set_has_mat_write_param();
  } else {
    clear_has_mat_write_param();
  }
  mat_write_param_ = mat_write_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mat_write_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::_internal_memory_data_param() const {
  return *memory_data_param_;
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::MemoryDataParameter>(GetArenaNoVirtual());
    memory_data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      memory_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::_internal_mvn_param() const {
  return *mvn_param_;
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  const ::caffe::MVNParameter* p = mvn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MVNParameter*>(
      &::caffe::_MVNParameter_default_instance_);
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::MVNParameter>(GetArenaNoVirtual());
    mvn_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mvn_param_;
  }
  if (mvn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.OneHotParameter onehot_param = 59;
inline bool LayerParameter::has_onehot_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_onehot_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_onehot_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_onehot_param() {
  if (onehot_param_ != NULL) onehot_param_->Clear();
  clear_has_onehot_param();
}
inline const ::caffe::OneHotParameter& LayerParameter::_internal_onehot_param() const {
  return *onehot_param_;
}
inline const ::caffe::OneHotParameter& LayerParameter::onehot_param() const {
  const ::caffe::OneHotParameter* p = onehot_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.onehot_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::OneHotParameter*>(
      &::caffe::_OneHotParameter_default_instance_);
}
inline ::caffe::OneHotParameter* LayerParameter::release_onehot_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.onehot_param)
  clear_has_onehot_param();
  ::caffe::OneHotParameter* temp = onehot_param_;
  onehot_param_ = NULL;
  return temp;
}
inline ::caffe::OneHotParameter* LayerParameter::mutable_onehot_param() {
  set_has_onehot_param();
  if (onehot_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::OneHotParameter>(GetArenaNoVirtual());
    onehot_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.onehot_param)
  return onehot_param_;
}
inline void LayerParameter::set_allocated_onehot_param(::caffe::OneHotParameter* onehot_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete onehot_param_;
  }
  if (onehot_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      onehot_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, onehot_param, submessage_arena);
    }
    set_has_onehot_param();
  } else {
    clear_has_onehot_param();
  }
  onehot_param_ = onehot_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.onehot_param)
}

// optional .caffe.PaddingParameter padding_param = 45;
inline bool LayerParameter::has_padding_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_padding_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_padding_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_padding_param() {
  if (padding_param_ != NULL) padding_param_->Clear();
  clear_has_padding_param();
}
inline const ::caffe::PaddingParameter& LayerParameter::_internal_padding_param() const {
  return *padding_param_;
}
inline const ::caffe::PaddingParameter& LayerParameter::padding_param() const {
  const ::caffe::PaddingParameter* p = padding_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.padding_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PaddingParameter*>(
      &::caffe::_PaddingParameter_default_instance_);
}
inline ::caffe::PaddingParameter* LayerParameter::release_padding_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.padding_param)
  clear_has_padding_param();
  ::caffe::PaddingParameter* temp = padding_param_;
  padding_param_ = NULL;
  return temp;
}
inline ::caffe::PaddingParameter* LayerParameter::mutable_padding_param() {
  set_has_padding_param();
  if (padding_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::PaddingParameter>(GetArenaNoVirtual());
    padding_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.padding_param)
  return padding_param_;
}
inline void LayerParameter::set_allocated_padding_param(::caffe::PaddingParameter* padding_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete padding_param_;
  }
  if (padding_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      padding_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, padding_param, submessage_arena);
    }
    set_has_padding_param();
  } else {
    clear_has_padding_param();
  }
  padding_param_ = padding_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.padding_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::_internal_pooling_param() const {
  return *pooling_param_;
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::PoolingParameter>(GetArenaNoVirtual());
    pooling_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::_internal_power_param() const {
  return *power_param_;
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::PowerParameter>(GetArenaNoVirtual());
    power_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_param_;
  }
  if (power_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      power_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::_internal_relu_param() const {
  return *relu_param_;
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ReLUParameter>(GetArenaNoVirtual());
    relu_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.SegAccuracyParameter seg_accuracy_param = 42;
inline bool LayerParameter::has_seg_accuracy_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_seg_accuracy_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_seg_accuracy_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_seg_accuracy_param() {
  if (seg_accuracy_param_ != NULL) seg_accuracy_param_->Clear();
  clear_has_seg_accuracy_param();
}
inline const ::caffe::SegAccuracyParameter& LayerParameter::_internal_seg_accuracy_param() const {
  return *seg_accuracy_param_;
}
inline const ::caffe::SegAccuracyParameter& LayerParameter::seg_accuracy_param() const {
  const ::caffe::SegAccuracyParameter* p = seg_accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.seg_accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SegAccuracyParameter*>(
      &::caffe::_SegAccuracyParameter_default_instance_);
}
inline ::caffe::SegAccuracyParameter* LayerParameter::release_seg_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.seg_accuracy_param)
  clear_has_seg_accuracy_param();
  ::caffe::SegAccuracyParameter* temp = seg_accuracy_param_;
  seg_accuracy_param_ = NULL;
  return temp;
}
inline ::caffe::SegAccuracyParameter* LayerParameter::mutable_seg_accuracy_param() {
  set_has_seg_accuracy_param();
  if (seg_accuracy_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::SegAccuracyParameter>(GetArenaNoVirtual());
    seg_accuracy_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.seg_accuracy_param)
  return seg_accuracy_param_;
}
inline void LayerParameter::set_allocated_seg_accuracy_param(::caffe::SegAccuracyParameter* seg_accuracy_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete seg_accuracy_param_;
  }
  if (seg_accuracy_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      seg_accuracy_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, seg_accuracy_param, submessage_arena);
    }
    set_has_seg_accuracy_param();
  } else {
    clear_has_seg_accuracy_param();
  }
  seg_accuracy_param_ = seg_accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.seg_accuracy_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::_internal_sigmoid_param() const {
  return *sigmoid_param_;
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::SigmoidParameter>(GetArenaNoVirtual());
    sigmoid_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sigmoid_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::_internal_softmax_param() const {
  return *softmax_param_;
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  const ::caffe::SoftmaxParameter* p = softmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxParameter*>(
      &::caffe::_SoftmaxParameter_default_instance_);
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::SoftmaxParameter>(GetArenaNoVirtual());
    softmax_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete softmax_param_;
  }
  if (softmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      softmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SoftmaxLossParameter softmaxloss_param = 44;
inline bool LayerParameter::has_softmaxloss_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_softmaxloss_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_softmaxloss_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_softmaxloss_param() {
  if (softmaxloss_param_ != NULL) softmaxloss_param_->Clear();
  clear_has_softmaxloss_param();
}
inline const ::caffe::SoftmaxLossParameter& LayerParameter::_internal_softmaxloss_param() const {
  return *softmaxloss_param_;
}
inline const ::caffe::SoftmaxLossParameter& LayerParameter::softmaxloss_param() const {
  const ::caffe::SoftmaxLossParameter* p = softmaxloss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmaxloss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxLossParameter*>(
      &::caffe::_SoftmaxLossParameter_default_instance_);
}
inline ::caffe::SoftmaxLossParameter* LayerParameter::release_softmaxloss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmaxloss_param)
  clear_has_softmaxloss_param();
  ::caffe::SoftmaxLossParameter* temp = softmaxloss_param_;
  softmaxloss_param_ = NULL;
  return temp;
}
inline ::caffe::SoftmaxLossParameter* LayerParameter::mutable_softmaxloss_param() {
  set_has_softmaxloss_param();
  if (softmaxloss_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::SoftmaxLossParameter>(GetArenaNoVirtual());
    softmaxloss_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmaxloss_param)
  return softmaxloss_param_;
}
inline void LayerParameter::set_allocated_softmaxloss_param(::caffe::SoftmaxLossParameter* softmaxloss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete softmaxloss_param_;
  }
  if (softmaxloss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      softmaxloss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, softmaxloss_param, submessage_arena);
    }
    set_has_softmaxloss_param();
  } else {
    clear_has_softmaxloss_param();
  }
  softmaxloss_param_ = softmaxloss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmaxloss_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::_internal_slice_param() const {
  return *slice_param_;
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  const ::caffe::SliceParameter* p = slice_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SliceParameter*>(
      &::caffe::_SliceParameter_default_instance_);
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::SliceParameter>(GetArenaNoVirtual());
    slice_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_param_;
  }
  if (slice_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slice_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::_internal_tanh_param() const {
  return *tanh_param_;
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  const ::caffe::TanHParameter* p = tanh_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TanHParameter*>(
      &::caffe::_TanHParameter_default_instance_);
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::TanHParameter>(GetArenaNoVirtual());
    tanh_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tanh_param_;
  }
  if (tanh_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tanh_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::_internal_threshold_param() const {
  return *threshold_param_;
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  const ::caffe::ThresholdParameter* p = threshold_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ThresholdParameter*>(
      &::caffe::_ThresholdParameter_default_instance_);
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::ThresholdParameter>(GetArenaNoVirtual());
    threshold_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete threshold_param_;
  }
  if (threshold_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.UniqueLabelParameter unique_label_param = 51;
inline bool LayerParameter::has_unique_label_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_unique_label_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_unique_label_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_unique_label_param() {
  if (unique_label_param_ != NULL) unique_label_param_->Clear();
  clear_has_unique_label_param();
}
inline const ::caffe::UniqueLabelParameter& LayerParameter::_internal_unique_label_param() const {
  return *unique_label_param_;
}
inline const ::caffe::UniqueLabelParameter& LayerParameter::unique_label_param() const {
  const ::caffe::UniqueLabelParameter* p = unique_label_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.unique_label_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::UniqueLabelParameter*>(
      &::caffe::_UniqueLabelParameter_default_instance_);
}
inline ::caffe::UniqueLabelParameter* LayerParameter::release_unique_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.unique_label_param)
  clear_has_unique_label_param();
  ::caffe::UniqueLabelParameter* temp = unique_label_param_;
  unique_label_param_ = NULL;
  return temp;
}
inline ::caffe::UniqueLabelParameter* LayerParameter::mutable_unique_label_param() {
  set_has_unique_label_param();
  if (unique_label_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::UniqueLabelParameter>(GetArenaNoVirtual());
    unique_label_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.unique_label_param)
  return unique_label_param_;
}
inline void LayerParameter::set_allocated_unique_label_param(::caffe::UniqueLabelParameter* unique_label_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unique_label_param_;
  }
  if (unique_label_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unique_label_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unique_label_param, submessage_arena);
    }
    set_has_unique_label_param();
  } else {
    clear_has_unique_label_param();
  }
  unique_label_param_ = unique_label_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.unique_label_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::_internal_window_data_param() const {
  return *window_data_param_;
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::WindowDataParameter>(GetArenaNoVirtual());
    window_data_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::_internal_transform_param() const {
  return *transform_param_;
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  const ::caffe::TransformationParameter* p = transform_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TransformationParameter*>(
      &::caffe::_TransformationParameter_default_instance_);
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::TransformationParameter>(GetArenaNoVirtual());
    transform_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_param_;
  }
  if (transform_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transform_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool LayerParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& LayerParameter::_internal_layer() const {
  return *layer_;
}
inline const ::caffe::V0LayerParameter& LayerParameter::layer() const {
  const ::caffe::V0LayerParameter* p = layer_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.layer)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::V0LayerParameter*>(
      &::caffe::_V0LayerParameter_default_instance_);
}
inline ::caffe::V0LayerParameter* LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline ::caffe::V0LayerParameter* LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::V0LayerParameter>(GetArenaNoVirtual());
    layer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.layer)
  return layer_;
}
inline void LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete layer_;
  }
  if (layer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      layer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.layer)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
#if LANG_CXX11
inline void TransformationParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TransformationParameter.mean_file)
}
#endif
inline void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  if (!has_mean_file()) {
    return NULL;
  }
  clear_has_mean_file();
  return mean_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// -------------------------------------------------------------------

// SegAccuracyParameter

// optional .caffe.SegAccuracyParameter.AccuracyMetric metric = 1 [default = PixelAccuracy];
inline bool SegAccuracyParameter::has_metric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegAccuracyParameter::set_has_metric() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegAccuracyParameter::clear_has_metric() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegAccuracyParameter::clear_metric() {
  metric_ = 0;
  clear_has_metric();
}
inline ::caffe::SegAccuracyParameter_AccuracyMetric SegAccuracyParameter::metric() const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.metric)
  return static_cast< ::caffe::SegAccuracyParameter_AccuracyMetric >(metric_);
}
inline void SegAccuracyParameter::set_metric(::caffe::SegAccuracyParameter_AccuracyMetric value) {
  assert(::caffe::SegAccuracyParameter_AccuracyMetric_IsValid(value));
  set_has_metric();
  metric_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.metric)
}

// repeated int32 ignore_label = 2;
inline int SegAccuracyParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void SegAccuracyParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::int32 SegAccuracyParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void SegAccuracyParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.ignore_label)
}
inline void SegAccuracyParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SegAccuracyParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SegAccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.SegAccuracyParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SegAccuracyParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SegAccuracyParameter.ignore_label)
  return &ignore_label_;
}

// optional bool reset = 3 [default = true];
inline bool SegAccuracyParameter::has_reset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegAccuracyParameter::set_has_reset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegAccuracyParameter::clear_has_reset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegAccuracyParameter::clear_reset() {
  reset_ = true;
  clear_has_reset();
}
inline bool SegAccuracyParameter::reset() const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.reset)
  return reset_;
}
inline void SegAccuracyParameter::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.reset)
}

// -------------------------------------------------------------------

// SoftmaxLossParameter

// optional string weight_source = 16;
inline bool SoftmaxLossParameter::has_weight_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxLossParameter::set_has_weight_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxLossParameter::clear_has_weight_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxLossParameter::clear_weight_source() {
  weight_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight_source();
}
inline const ::std::string& SoftmaxLossParameter::weight_source() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxLossParameter.weight_source)
  return weight_source_.GetNoArena();
}
inline void SoftmaxLossParameter::set_weight_source(const ::std::string& value) {
  set_has_weight_source();
  weight_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxLossParameter.weight_source)
}
#if LANG_CXX11
inline void SoftmaxLossParameter::set_weight_source(::std::string&& value) {
  set_has_weight_source();
  weight_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxLossParameter.weight_source)
}
#endif
inline void SoftmaxLossParameter::set_weight_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weight_source();
  weight_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxLossParameter.weight_source)
}
inline void SoftmaxLossParameter::set_weight_source(const char* value, size_t size) {
  set_has_weight_source();
  weight_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxLossParameter.weight_source)
}
inline ::std::string* SoftmaxLossParameter::mutable_weight_source() {
  set_has_weight_source();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxLossParameter.weight_source)
  return weight_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftmaxLossParameter::release_weight_source() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxLossParameter.weight_source)
  if (!has_weight_source()) {
    return NULL;
  }
  clear_has_weight_source();
  return weight_source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftmaxLossParameter::set_allocated_weight_source(::std::string* weight_source) {
  if (weight_source != NULL) {
    set_has_weight_source();
  } else {
    clear_has_weight_source();
  }
  weight_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_source);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxLossParameter.weight_source)
}

// repeated int32 ignore_label = 2;
inline int SoftmaxLossParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void SoftmaxLossParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::int32 SoftmaxLossParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxLossParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void SoftmaxLossParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxLossParameter.ignore_label)
}
inline void SoftmaxLossParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SoftmaxLossParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SoftmaxLossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.SoftmaxLossParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SoftmaxLossParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SoftmaxLossParameter.ignore_label)
  return &ignore_label_;
}

// -------------------------------------------------------------------

// DenseCRFParameter

// optional int32 max_iter = 1 [default = 10];
inline bool DenseCRFParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseCRFParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseCRFParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseCRFParameter::clear_max_iter() {
  max_iter_ = 10;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 DenseCRFParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.max_iter)
  return max_iter_;
}
inline void DenseCRFParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.max_iter)
}

// repeated float pos_xy_std = 2;
inline int DenseCRFParameter::pos_xy_std_size() const {
  return pos_xy_std_.size();
}
inline void DenseCRFParameter::clear_pos_xy_std() {
  pos_xy_std_.Clear();
}
inline float DenseCRFParameter::pos_xy_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.pos_xy_std)
  return pos_xy_std_.Get(index);
}
inline void DenseCRFParameter::set_pos_xy_std(int index, float value) {
  pos_xy_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.pos_xy_std)
}
inline void DenseCRFParameter::add_pos_xy_std(float value) {
  pos_xy_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.pos_xy_std)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_xy_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.pos_xy_std)
  return pos_xy_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_xy_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.pos_xy_std)
  return &pos_xy_std_;
}

// repeated float pos_w = 3;
inline int DenseCRFParameter::pos_w_size() const {
  return pos_w_.size();
}
inline void DenseCRFParameter::clear_pos_w() {
  pos_w_.Clear();
}
inline float DenseCRFParameter::pos_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.pos_w)
  return pos_w_.Get(index);
}
inline void DenseCRFParameter::set_pos_w(int index, float value) {
  pos_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.pos_w)
}
inline void DenseCRFParameter::add_pos_w(float value) {
  pos_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.pos_w)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_w() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.pos_w)
  return pos_w_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.pos_w)
  return &pos_w_;
}

// repeated float bi_xy_std = 4;
inline int DenseCRFParameter::bi_xy_std_size() const {
  return bi_xy_std_.size();
}
inline void DenseCRFParameter::clear_bi_xy_std() {
  bi_xy_std_.Clear();
}
inline float DenseCRFParameter::bi_xy_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_xy_std)
  return bi_xy_std_.Get(index);
}
inline void DenseCRFParameter::set_bi_xy_std(int index, float value) {
  bi_xy_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_xy_std)
}
inline void DenseCRFParameter::add_bi_xy_std(float value) {
  bi_xy_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_xy_std)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_xy_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_xy_std)
  return bi_xy_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_xy_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_xy_std)
  return &bi_xy_std_;
}

// repeated float bi_rgb_std = 5;
inline int DenseCRFParameter::bi_rgb_std_size() const {
  return bi_rgb_std_.size();
}
inline void DenseCRFParameter::clear_bi_rgb_std() {
  bi_rgb_std_.Clear();
}
inline float DenseCRFParameter::bi_rgb_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_rgb_std)
  return bi_rgb_std_.Get(index);
}
inline void DenseCRFParameter::set_bi_rgb_std(int index, float value) {
  bi_rgb_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_rgb_std)
}
inline void DenseCRFParameter::add_bi_rgb_std(float value) {
  bi_rgb_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_rgb_std)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_rgb_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_rgb_std)
  return bi_rgb_std_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_rgb_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_rgb_std)
  return &bi_rgb_std_;
}

// repeated float bi_w = 6;
inline int DenseCRFParameter::bi_w_size() const {
  return bi_w_.size();
}
inline void DenseCRFParameter::clear_bi_w() {
  bi_w_.Clear();
}
inline float DenseCRFParameter::bi_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_w)
  return bi_w_.Get(index);
}
inline void DenseCRFParameter::set_bi_w(int index, float value) {
  bi_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_w)
}
inline void DenseCRFParameter::add_bi_w(float value) {
  bi_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_w)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_w() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_w)
  return bi_w_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_w)
  return &bi_w_;
}

// optional bool output_probability = 7 [default = true];
inline bool DenseCRFParameter::has_output_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseCRFParameter::set_has_output_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseCRFParameter::clear_has_output_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseCRFParameter::clear_output_probability() {
  output_probability_ = true;
  clear_has_output_probability();
}
inline bool DenseCRFParameter::output_probability() const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.output_probability)
  return output_probability_;
}
inline void DenseCRFParameter::set_output_probability(bool value) {
  set_has_output_probability();
  output_probability_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.output_probability)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// -------------------------------------------------------------------

// AdaptiveBiasChannelParameter

// optional int32 num_iter = 1 [default = 1];
inline bool AdaptiveBiasChannelParameter::has_num_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdaptiveBiasChannelParameter::set_has_num_iter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdaptiveBiasChannelParameter::clear_has_num_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdaptiveBiasChannelParameter::clear_num_iter() {
  num_iter_ = 1;
  clear_has_num_iter();
}
inline ::google::protobuf::int32 AdaptiveBiasChannelParameter::num_iter() const {
  // @@protoc_insertion_point(field_get:caffe.AdaptiveBiasChannelParameter.num_iter)
  return num_iter_;
}
inline void AdaptiveBiasChannelParameter::set_num_iter(::google::protobuf::int32 value) {
  set_has_num_iter();
  num_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.AdaptiveBiasChannelParameter.num_iter)
}

// optional float bg_portion = 2 [default = 0.2];
inline bool AdaptiveBiasChannelParameter::has_bg_portion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdaptiveBiasChannelParameter::set_has_bg_portion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdaptiveBiasChannelParameter::clear_has_bg_portion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdaptiveBiasChannelParameter::clear_bg_portion() {
  bg_portion_ = 0.2f;
  clear_has_bg_portion();
}
inline float AdaptiveBiasChannelParameter::bg_portion() const {
  // @@protoc_insertion_point(field_get:caffe.AdaptiveBiasChannelParameter.bg_portion)
  return bg_portion_;
}
inline void AdaptiveBiasChannelParameter::set_bg_portion(float value) {
  set_has_bg_portion();
  bg_portion_ = value;
  // @@protoc_insertion_point(field_set:caffe.AdaptiveBiasChannelParameter.bg_portion)
}

// optional float fg_portion = 3 [default = 0.2];
inline bool AdaptiveBiasChannelParameter::has_fg_portion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdaptiveBiasChannelParameter::set_has_fg_portion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdaptiveBiasChannelParameter::clear_has_fg_portion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdaptiveBiasChannelParameter::clear_fg_portion() {
  fg_portion_ = 0.2f;
  clear_has_fg_portion();
}
inline float AdaptiveBiasChannelParameter::fg_portion() const {
  // @@protoc_insertion_point(field_get:caffe.AdaptiveBiasChannelParameter.fg_portion)
  return fg_portion_;
}
inline void AdaptiveBiasChannelParameter::set_fg_portion(float value) {
  set_has_fg_portion();
  fg_portion_ = value;
  // @@protoc_insertion_point(field_set:caffe.AdaptiveBiasChannelParameter.fg_portion)
}

// optional bool suppress_others = 4 [default = true];
inline bool AdaptiveBiasChannelParameter::has_suppress_others() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdaptiveBiasChannelParameter::set_has_suppress_others() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdaptiveBiasChannelParameter::clear_has_suppress_others() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdaptiveBiasChannelParameter::clear_suppress_others() {
  suppress_others_ = true;
  clear_has_suppress_others();
}
inline bool AdaptiveBiasChannelParameter::suppress_others() const {
  // @@protoc_insertion_point(field_get:caffe.AdaptiveBiasChannelParameter.suppress_others)
  return suppress_others_;
}
inline void AdaptiveBiasChannelParameter::set_suppress_others(bool value) {
  set_has_suppress_others();
  suppress_others_ = value;
  // @@protoc_insertion_point(field_set:caffe.AdaptiveBiasChannelParameter.suppress_others)
}

// optional float margin_others = 5 [default = 1e-05];
inline bool AdaptiveBiasChannelParameter::has_margin_others() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdaptiveBiasChannelParameter::set_has_margin_others() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdaptiveBiasChannelParameter::clear_has_margin_others() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdaptiveBiasChannelParameter::clear_margin_others() {
  margin_others_ = 1e-05f;
  clear_has_margin_others();
}
inline float AdaptiveBiasChannelParameter::margin_others() const {
  // @@protoc_insertion_point(field_get:caffe.AdaptiveBiasChannelParameter.margin_others)
  return margin_others_;
}
inline void AdaptiveBiasChannelParameter::set_margin_others(float value) {
  set_has_margin_others();
  margin_others_ = value;
  // @@protoc_insertion_point(field_set:caffe.AdaptiveBiasChannelParameter.margin_others)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// -------------------------------------------------------------------

// BiasChannelParameter

// optional float bg_bias = 1 [default = 1];
inline bool BiasChannelParameter::has_bg_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasChannelParameter::set_has_bg_bias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasChannelParameter::clear_has_bg_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasChannelParameter::clear_bg_bias() {
  bg_bias_ = 1;
  clear_has_bg_bias();
}
inline float BiasChannelParameter::bg_bias() const {
  // @@protoc_insertion_point(field_get:caffe.BiasChannelParameter.bg_bias)
  return bg_bias_;
}
inline void BiasChannelParameter::set_bg_bias(float value) {
  set_has_bg_bias();
  bg_bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasChannelParameter.bg_bias)
}

// optional float fg_bias = 2 [default = 2];
inline bool BiasChannelParameter::has_fg_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasChannelParameter::set_has_fg_bias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasChannelParameter::clear_has_fg_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasChannelParameter::clear_fg_bias() {
  fg_bias_ = 2;
  clear_has_fg_bias();
}
inline float BiasChannelParameter::fg_bias() const {
  // @@protoc_insertion_point(field_get:caffe.BiasChannelParameter.fg_bias)
  return fg_bias_;
}
inline void BiasChannelParameter::set_fg_bias(float value) {
  set_has_fg_bias();
  fg_bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasChannelParameter.fg_bias)
}

// repeated int32 ignore_label = 3;
inline int BiasChannelParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void BiasChannelParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::int32 BiasChannelParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BiasChannelParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void BiasChannelParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BiasChannelParameter.ignore_label)
}
inline void BiasChannelParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BiasChannelParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BiasChannelParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.BiasChannelParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BiasChannelParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BiasChannelParameter.ignore_label)
  return &ignore_label_;
}

// optional .caffe.BiasChannelParameter.LabelType label_type = 4 [default = IMAGE];
inline bool BiasChannelParameter::has_label_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasChannelParameter::set_has_label_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasChannelParameter::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasChannelParameter::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
inline ::caffe::BiasChannelParameter_LabelType BiasChannelParameter::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.BiasChannelParameter.label_type)
  return static_cast< ::caffe::BiasChannelParameter_LabelType >(label_type_);
}
inline void BiasChannelParameter::set_label_type(::caffe::BiasChannelParameter_LabelType value) {
  assert(::caffe::BiasChannelParameter_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasChannelParameter.label_type)
}

// -------------------------------------------------------------------

// CensorLabelParameter

// required int32 ignore_label = 1;
inline bool CensorLabelParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CensorLabelParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CensorLabelParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CensorLabelParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 CensorLabelParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.CensorLabelParameter.ignore_label)
  return ignore_label_;
}
inline void CensorLabelParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.CensorLabelParameter.ignore_label)
}

// -------------------------------------------------------------------

// ChannelAggregatorParameter

// optional string label_map_file = 1;
inline bool ChannelAggregatorParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelAggregatorParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelAggregatorParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelAggregatorParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
inline const ::std::string& ChannelAggregatorParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelAggregatorParameter.label_map_file)
  return label_map_file_.GetNoArena();
}
inline void ChannelAggregatorParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ChannelAggregatorParameter.label_map_file)
}
#if LANG_CXX11
inline void ChannelAggregatorParameter::set_label_map_file(::std::string&& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ChannelAggregatorParameter.label_map_file)
}
#endif
inline void ChannelAggregatorParameter::set_label_map_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ChannelAggregatorParameter.label_map_file)
}
inline void ChannelAggregatorParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ChannelAggregatorParameter.label_map_file)
}
inline ::std::string* ChannelAggregatorParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.ChannelAggregatorParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelAggregatorParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.ChannelAggregatorParameter.label_map_file)
  if (!has_label_map_file()) {
    return NULL;
  }
  clear_has_label_map_file();
  return label_map_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAggregatorParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ChannelAggregatorParameter.label_map_file)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
inline bool ConvolutionParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline void ConvolutionParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_size = 4;
inline bool ConvolutionParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline void ConvolutionParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional uint32 stride = 6 [default = 1];
inline bool ConvolutionParameter::has_stride() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_stride() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline void ConvolutionParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 hole = 17 [default = 1];
inline bool ConvolutionParameter::has_hole() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_hole() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_hole() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_hole() {
  hole_ = 1u;
  clear_has_hole();
}
inline ::google::protobuf::uint32 ConvolutionParameter::hole() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.hole)
  return hole_;
}
inline void ConvolutionParameter::set_hole(::google::protobuf::uint32 value) {
  set_has_hole();
  hole_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.hole)
}

// optional uint32 hole_h = 18 [default = 1];
inline bool ConvolutionParameter::has_hole_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_hole_h() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_hole_h() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_hole_h() {
  hole_h_ = 1u;
  clear_has_hole_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::hole_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.hole_h)
  return hole_h_;
}
inline void ConvolutionParameter::set_hole_h(::google::protobuf::uint32 value) {
  set_has_hole_h();
  hole_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.hole_h)
}

// optional uint32 hole_w = 19 [default = 1];
inline bool ConvolutionParameter::has_hole_w() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_hole_w() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_hole_w() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_hole_w() {
  hole_w_ = 1u;
  clear_has_hole_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::hole_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.hole_w)
  return hole_w_;
}
inline void ConvolutionParameter::set_hole_w(::google::protobuf::uint32 value) {
  set_has_hole_w();
  hole_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.hole_w)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::_internal_weight_filler() const {
  return *weight_filler_;
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::_internal_bias_filler() const {
  return *bias_filler_;
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena();
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
#if LANG_CXX11
inline void DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
#endif
inline void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
#if LANG_CXX11
inline void DataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
#endif
inline void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  if (!has_mean_file()) {
    return NULL;
  }
  clear_has_mean_file();
  return mean_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// -------------------------------------------------------------------

// DominantChannelParameter

// optional int32 top_k = 1 [default = 1];
inline bool DominantChannelParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DominantChannelParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DominantChannelParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DominantChannelParameter::clear_top_k() {
  top_k_ = 1;
  clear_has_top_k();
}
inline ::google::protobuf::int32 DominantChannelParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DominantChannelParameter.top_k)
  return top_k_;
}
inline void DominantChannelParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DominantChannelParameter.top_k)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// EuclideanLossParameter

// optional .caffe.EuclideanLossParameter.Type type = 1 [default = L2];
inline bool EuclideanLossParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EuclideanLossParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EuclideanLossParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EuclideanLossParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::EuclideanLossParameter_Type EuclideanLossParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.EuclideanLossParameter.type)
  return static_cast< ::caffe::EuclideanLossParameter_Type >(type_);
}
inline void EuclideanLossParameter::set_type(::caffe::EuclideanLossParameter_Type value) {
  assert(::caffe::EuclideanLossParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.EuclideanLossParameter.type)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// GainChannelParameter

// required int32 num_output_nz = 1 [default = 0];
inline bool GainChannelParameter::has_num_output_nz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GainChannelParameter::set_has_num_output_nz() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GainChannelParameter::clear_has_num_output_nz() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GainChannelParameter::clear_num_output_nz() {
  num_output_nz_ = 0;
  clear_has_num_output_nz();
}
inline ::google::protobuf::int32 GainChannelParameter::num_output_nz() const {
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.num_output_nz)
  return num_output_nz_;
}
inline void GainChannelParameter::set_num_output_nz(::google::protobuf::int32 value) {
  set_has_num_output_nz();
  num_output_nz_ = value;
  // @@protoc_insertion_point(field_set:caffe.GainChannelParameter.num_output_nz)
}

// optional float drift = 2 [default = 0];
inline bool GainChannelParameter::has_drift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GainChannelParameter::set_has_drift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GainChannelParameter::clear_has_drift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GainChannelParameter::clear_drift() {
  drift_ = 0;
  clear_has_drift();
}
inline float GainChannelParameter::drift() const {
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.drift)
  return drift_;
}
inline void GainChannelParameter::set_drift(float value) {
  set_has_drift();
  drift_ = value;
  // @@protoc_insertion_point(field_set:caffe.GainChannelParameter.drift)
}

// optional float stdev = 3 [default = 0];
inline bool GainChannelParameter::has_stdev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GainChannelParameter::set_has_stdev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GainChannelParameter::clear_has_stdev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GainChannelParameter::clear_stdev() {
  stdev_ = 0;
  clear_has_stdev();
}
inline float GainChannelParameter::stdev() const {
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.stdev)
  return stdev_;
}
inline void GainChannelParameter::set_stdev(float value) {
  set_has_stdev();
  stdev_ = value;
  // @@protoc_insertion_point(field_set:caffe.GainChannelParameter.stdev)
}

// optional .caffe.FillerParameter gain_filler = 4;
inline bool GainChannelParameter::has_gain_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GainChannelParameter::set_has_gain_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GainChannelParameter::clear_has_gain_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GainChannelParameter::clear_gain_filler() {
  if (gain_filler_ != NULL) gain_filler_->Clear();
  clear_has_gain_filler();
}
inline const ::caffe::FillerParameter& GainChannelParameter::_internal_gain_filler() const {
  return *gain_filler_;
}
inline const ::caffe::FillerParameter& GainChannelParameter::gain_filler() const {
  const ::caffe::FillerParameter* p = gain_filler_;
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.gain_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* GainChannelParameter::release_gain_filler() {
  // @@protoc_insertion_point(field_release:caffe.GainChannelParameter.gain_filler)
  clear_has_gain_filler();
  ::caffe::FillerParameter* temp = gain_filler_;
  gain_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* GainChannelParameter::mutable_gain_filler() {
  set_has_gain_filler();
  if (gain_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    gain_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GainChannelParameter.gain_filler)
  return gain_filler_;
}
inline void GainChannelParameter::set_allocated_gain_filler(::caffe::FillerParameter* gain_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gain_filler_;
  }
  if (gain_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gain_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gain_filler, submessage_arena);
    }
    set_has_gain_filler();
  } else {
    clear_has_gain_filler();
  }
  gain_filler_ = gain_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.GainChannelParameter.gain_filler)
}

// optional bool norm_mean = 5 [default = true];
inline bool GainChannelParameter::has_norm_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GainChannelParameter::set_has_norm_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GainChannelParameter::clear_has_norm_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GainChannelParameter::clear_norm_mean() {
  norm_mean_ = true;
  clear_has_norm_mean();
}
inline bool GainChannelParameter::norm_mean() const {
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.norm_mean)
  return norm_mean_;
}
inline void GainChannelParameter::set_norm_mean(bool value) {
  set_has_norm_mean();
  norm_mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.GainChannelParameter.norm_mean)
}

// optional float thresh = 6 [default = 0.001];
inline bool GainChannelParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GainChannelParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GainChannelParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GainChannelParameter::clear_thresh() {
  thresh_ = 0.001f;
  clear_has_thresh();
}
inline float GainChannelParameter::thresh() const {
  // @@protoc_insertion_point(field_get:caffe.GainChannelParameter.thresh)
  return thresh_;
}
inline void GainChannelParameter::set_thresh(float value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.GainChannelParameter.thresh)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena();
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
#if LANG_CXX11
inline void HDF5DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
#endif
inline void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena();
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
#if LANG_CXX11
inline void HDF5OutputParameter::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
#endif
inline void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// HistogramParameter

// required int32 num_labels = 1;
inline bool HistogramParameter::has_num_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistogramParameter::set_has_num_labels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HistogramParameter::clear_has_num_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HistogramParameter::clear_num_labels() {
  num_labels_ = 0;
  clear_has_num_labels();
}
inline ::google::protobuf::int32 HistogramParameter::num_labels() const {
  // @@protoc_insertion_point(field_get:caffe.HistogramParameter.num_labels)
  return num_labels_;
}
inline void HistogramParameter::set_num_labels(::google::protobuf::int32 value) {
  set_has_num_labels();
  num_labels_ = value;
  // @@protoc_insertion_point(field_set:caffe.HistogramParameter.num_labels)
}

// repeated int32 ignore_label = 2;
inline int HistogramParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void HistogramParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::int32 HistogramParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.HistogramParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void HistogramParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.HistogramParameter.ignore_label)
}
inline void HistogramParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.HistogramParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HistogramParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.HistogramParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HistogramParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.HistogramParameter.ignore_label)
  return &ignore_label_;
}

// -------------------------------------------------------------------

// IgnoreOverlayParameter

// optional int32 ignore_label = 1;
inline bool IgnoreOverlayParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IgnoreOverlayParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IgnoreOverlayParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IgnoreOverlayParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 IgnoreOverlayParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.IgnoreOverlayParameter.ignore_label)
  return ignore_label_;
}
inline void IgnoreOverlayParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.IgnoreOverlayParameter.ignore_label)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena();
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
#if LANG_CXX11
inline void ImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
#endif
inline void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional int32 ignore_label = 15 [default = 255];
inline bool ImageDataParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataParameter::clear_ignore_label() {
  ignore_label_ = 255;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 ImageDataParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.ignore_label)
  return ignore_label_;
}
inline void ImageDataParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.ignore_label)
}

// optional .caffe.ImageDataParameter.LabelType label_type = 16 [default = IMAGE];
inline bool ImageDataParameter::has_label_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_label_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
inline ::caffe::ImageDataParameter_LabelType ImageDataParameter::label_type() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_type)
  return static_cast< ::caffe::ImageDataParameter_LabelType >(label_type_);
}
inline void ImageDataParameter::set_label_type(::caffe::ImageDataParameter_LabelType value) {
  assert(::caffe::ImageDataParameter_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_type)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
#if LANG_CXX11
inline void ImageDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
#endif
inline void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  if (!has_mean_file()) {
    return NULL;
  }
  clear_has_mean_file();
  return mean_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
#if LANG_CXX11
inline void ImageDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.root_folder)
}
#endif
inline void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  if (!has_root_folder()) {
    return NULL;
  }
  clear_has_root_folder();
  return root_folder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// optional bool has_label = 13 [default = true];
inline bool ImageDataParameter::has_has_label() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImageDataParameter::set_has_has_label() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImageDataParameter::clear_has_has_label() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImageDataParameter::clear_has_label() {
  has_label_ = true;
  clear_has_has_label();
}
inline bool ImageDataParameter::has_label() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.has_label)
  return has_label_;
}
inline void ImageDataParameter::set_has_label(bool value) {
  set_has_has_label();
  has_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.has_label)
}

// optional int32 max_labels = 14 [default = 1];
inline bool ImageDataParameter::has_max_labels() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImageDataParameter::set_has_max_labels() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImageDataParameter::clear_has_max_labels() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImageDataParameter::clear_max_labels() {
  max_labels_ = 1;
  clear_has_max_labels();
}
inline ::google::protobuf::int32 ImageDataParameter::max_labels() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_labels)
  return max_labels_;
}
inline void ImageDataParameter::set_max_labels(::google::protobuf::int32 value) {
  set_has_max_labels();
  max_labels_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_labels)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena();
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
#if LANG_CXX11
inline void InfogainLossParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
#endif
inline void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InterpParameter

// optional int32 height = 1 [default = 0];
inline bool InterpParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterpParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterpParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterpParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 InterpParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.height)
  return height_;
}
inline void InterpParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.height)
}

// optional int32 width = 2 [default = 0];
inline bool InterpParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterpParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InterpParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InterpParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 InterpParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.width)
  return width_;
}
inline void InterpParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.width)
}

// optional int32 zoom_factor = 3 [default = 1];
inline bool InterpParameter::has_zoom_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InterpParameter::set_has_zoom_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InterpParameter::clear_has_zoom_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InterpParameter::clear_zoom_factor() {
  zoom_factor_ = 1;
  clear_has_zoom_factor();
}
inline ::google::protobuf::int32 InterpParameter::zoom_factor() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.zoom_factor)
  return zoom_factor_;
}
inline void InterpParameter::set_zoom_factor(::google::protobuf::int32 value) {
  set_has_zoom_factor();
  zoom_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.zoom_factor)
}

// optional int32 shrink_factor = 4 [default = 1];
inline bool InterpParameter::has_shrink_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InterpParameter::set_has_shrink_factor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InterpParameter::clear_has_shrink_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InterpParameter::clear_shrink_factor() {
  shrink_factor_ = 1;
  clear_has_shrink_factor();
}
inline ::google::protobuf::int32 InterpParameter::shrink_factor() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.shrink_factor)
  return shrink_factor_;
}
inline void InterpParameter::set_shrink_factor(::google::protobuf::int32 value) {
  set_has_shrink_factor();
  shrink_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.shrink_factor)
}

// optional int32 pad_beg = 5 [default = 0];
inline bool InterpParameter::has_pad_beg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InterpParameter::set_has_pad_beg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InterpParameter::clear_has_pad_beg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InterpParameter::clear_pad_beg() {
  pad_beg_ = 0;
  clear_has_pad_beg();
}
inline ::google::protobuf::int32 InterpParameter::pad_beg() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.pad_beg)
  return pad_beg_;
}
inline void InterpParameter::set_pad_beg(::google::protobuf::int32 value) {
  set_has_pad_beg();
  pad_beg_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.pad_beg)
}

// optional int32 pad_end = 6 [default = 0];
inline bool InterpParameter::has_pad_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InterpParameter::set_has_pad_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InterpParameter::clear_has_pad_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InterpParameter::clear_pad_end() {
  pad_end_ = 0;
  clear_has_pad_end();
}
inline ::google::protobuf::int32 InterpParameter::pad_end() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.pad_end)
  return pad_end_;
}
inline void InterpParameter::set_pad_end(::google::protobuf::int32 value) {
  set_has_pad_end();
  pad_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.pad_end)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::_internal_weight_filler() const {
  return *weight_filler_;
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::_internal_bias_filler() const {
  return *bias_filler_;
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// -------------------------------------------------------------------

// MatReadParameter

// required string prefix = 1;
inline bool MatReadParameter::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatReadParameter::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatReadParameter::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatReadParameter::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string& MatReadParameter::prefix() const {
  // @@protoc_insertion_point(field_get:caffe.MatReadParameter.prefix)
  return prefix_.GetNoArena();
}
inline void MatReadParameter::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MatReadParameter.prefix)
}
#if LANG_CXX11
inline void MatReadParameter::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MatReadParameter.prefix)
}
#endif
inline void MatReadParameter::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MatReadParameter.prefix)
}
inline void MatReadParameter::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MatReadParameter.prefix)
}
inline ::std::string* MatReadParameter::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.MatReadParameter.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatReadParameter::release_prefix() {
  // @@protoc_insertion_point(field_release:caffe.MatReadParameter.prefix)
  if (!has_prefix()) {
    return NULL;
  }
  clear_has_prefix();
  return prefix_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatReadParameter::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.MatReadParameter.prefix)
}

// optional string source = 2 [default = ""];
inline bool MatReadParameter::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatReadParameter::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatReadParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatReadParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& MatReadParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.MatReadParameter.source)
  return source_.GetNoArena();
}
inline void MatReadParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MatReadParameter.source)
}
#if LANG_CXX11
inline void MatReadParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MatReadParameter.source)
}
#endif
inline void MatReadParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MatReadParameter.source)
}
inline void MatReadParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MatReadParameter.source)
}
inline ::std::string* MatReadParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.MatReadParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatReadParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.MatReadParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatReadParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.MatReadParameter.source)
}

// optional int32 strip = 3 [default = 0];
inline bool MatReadParameter::has_strip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatReadParameter::set_has_strip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatReadParameter::clear_has_strip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatReadParameter::clear_strip() {
  strip_ = 0;
  clear_has_strip();
}
inline ::google::protobuf::int32 MatReadParameter::strip() const {
  // @@protoc_insertion_point(field_get:caffe.MatReadParameter.strip)
  return strip_;
}
inline void MatReadParameter::set_strip(::google::protobuf::int32 value) {
  set_has_strip();
  strip_ = value;
  // @@protoc_insertion_point(field_set:caffe.MatReadParameter.strip)
}

// optional int32 batch_size = 4 [default = 1];
inline bool MatReadParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatReadParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatReadParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatReadParameter::clear_batch_size() {
  batch_size_ = 1;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 MatReadParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MatReadParameter.batch_size)
  return batch_size_;
}
inline void MatReadParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MatReadParameter.batch_size)
}

// -------------------------------------------------------------------

// MatWriteParameter

// required string prefix = 1;
inline bool MatWriteParameter::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatWriteParameter::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatWriteParameter::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatWriteParameter::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string& MatWriteParameter::prefix() const {
  // @@protoc_insertion_point(field_get:caffe.MatWriteParameter.prefix)
  return prefix_.GetNoArena();
}
inline void MatWriteParameter::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MatWriteParameter.prefix)
}
#if LANG_CXX11
inline void MatWriteParameter::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MatWriteParameter.prefix)
}
#endif
inline void MatWriteParameter::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MatWriteParameter.prefix)
}
inline void MatWriteParameter::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MatWriteParameter.prefix)
}
inline ::std::string* MatWriteParameter::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.MatWriteParameter.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatWriteParameter::release_prefix() {
  // @@protoc_insertion_point(field_release:caffe.MatWriteParameter.prefix)
  if (!has_prefix()) {
    return NULL;
  }
  clear_has_prefix();
  return prefix_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatWriteParameter::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.MatWriteParameter.prefix)
}

// optional string source = 2 [default = ""];
inline bool MatWriteParameter::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatWriteParameter::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatWriteParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatWriteParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& MatWriteParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.MatWriteParameter.source)
  return source_.GetNoArena();
}
inline void MatWriteParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MatWriteParameter.source)
}
#if LANG_CXX11
inline void MatWriteParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MatWriteParameter.source)
}
#endif
inline void MatWriteParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MatWriteParameter.source)
}
inline void MatWriteParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MatWriteParameter.source)
}
inline ::std::string* MatWriteParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.MatWriteParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatWriteParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.MatWriteParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatWriteParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.MatWriteParameter.source)
}

// optional int32 strip = 3 [default = 0];
inline bool MatWriteParameter::has_strip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatWriteParameter::set_has_strip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatWriteParameter::clear_has_strip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatWriteParameter::clear_strip() {
  strip_ = 0;
  clear_has_strip();
}
inline ::google::protobuf::int32 MatWriteParameter::strip() const {
  // @@protoc_insertion_point(field_get:caffe.MatWriteParameter.strip)
  return strip_;
}
inline void MatWriteParameter::set_strip(::google::protobuf::int32 value) {
  set_has_strip();
  strip_ = value;
  // @@protoc_insertion_point(field_set:caffe.MatWriteParameter.strip)
}

// optional int32 period = 4 [default = 1];
inline bool MatWriteParameter::has_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatWriteParameter::set_has_period() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatWriteParameter::clear_has_period() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatWriteParameter::clear_period() {
  period_ = 1;
  clear_has_period();
}
inline ::google::protobuf::int32 MatWriteParameter::period() const {
  // @@protoc_insertion_point(field_get:caffe.MatWriteParameter.period)
  return period_;
}
inline void MatWriteParameter::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:caffe.MatWriteParameter.period)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// -------------------------------------------------------------------

// OneHotParameter

// required int32 num_labels = 1;
inline bool OneHotParameter::has_num_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneHotParameter::set_has_num_labels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneHotParameter::clear_has_num_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneHotParameter::clear_num_labels() {
  num_labels_ = 0;
  clear_has_num_labels();
}
inline ::google::protobuf::int32 OneHotParameter::num_labels() const {
  // @@protoc_insertion_point(field_get:caffe.OneHotParameter.num_labels)
  return num_labels_;
}
inline void OneHotParameter::set_num_labels(::google::protobuf::int32 value) {
  set_has_num_labels();
  num_labels_ = value;
  // @@protoc_insertion_point(field_set:caffe.OneHotParameter.num_labels)
}

// -------------------------------------------------------------------

// PaddingParameter

// optional int32 pad_beg = 1 [default = 0];
inline bool PaddingParameter::has_pad_beg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaddingParameter::set_has_pad_beg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaddingParameter::clear_has_pad_beg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaddingParameter::clear_pad_beg() {
  pad_beg_ = 0;
  clear_has_pad_beg();
}
inline ::google::protobuf::int32 PaddingParameter::pad_beg() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_beg)
  return pad_beg_;
}
inline void PaddingParameter::set_pad_beg(::google::protobuf::int32 value) {
  set_has_pad_beg();
  pad_beg_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_beg)
}

// optional int32 pad_end = 2 [default = 0];
inline bool PaddingParameter::has_pad_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaddingParameter::set_has_pad_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaddingParameter::clear_has_pad_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaddingParameter::clear_pad_end() {
  pad_end_ = 0;
  clear_has_pad_end();
}
inline ::google::protobuf::int32 PaddingParameter::pad_end() const {
  // @@protoc_insertion_point(field_get:caffe.PaddingParameter.pad_end)
  return pad_end_;
}
inline void PaddingParameter::set_pad_end(::google::protobuf::int32 value) {
  set_has_pad_end();
  pad_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.PaddingParameter.pad_end)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena();
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
#if LANG_CXX11
inline void WindowDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
#endif
inline void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
#if LANG_CXX11
inline void WindowDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
#endif
inline void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  if (!has_mean_file()) {
    return NULL;
  }
  clear_has_mean_file();
  return mean_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena();
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
#if LANG_CXX11
inline void WindowDataParameter::set_crop_mode(::std::string&& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(
    &::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
#endif
inline void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  if (!has_crop_mode()) {
    return NULL;
  }
  clear_has_crop_mode();
  return crop_mode_.ReleaseNonDefaultNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(&::caffe::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
#if LANG_CXX11
inline void WindowDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.root_folder)
}
#endif
inline void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  if (!has_root_folder()) {
    return NULL;
  }
  clear_has_root_folder();
  return root_folder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// UniqueLabelParameter

// required int32 max_labels = 1;
inline bool UniqueLabelParameter::has_max_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueLabelParameter::set_has_max_labels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueLabelParameter::clear_has_max_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueLabelParameter::clear_max_labels() {
  max_labels_ = 0;
  clear_has_max_labels();
}
inline ::google::protobuf::int32 UniqueLabelParameter::max_labels() const {
  // @@protoc_insertion_point(field_get:caffe.UniqueLabelParameter.max_labels)
  return max_labels_;
}
inline void UniqueLabelParameter::set_max_labels(::google::protobuf::int32 value) {
  set_has_max_labels();
  max_labels_ = value;
  // @@protoc_insertion_point(field_set:caffe.UniqueLabelParameter.max_labels)
}

// repeated float ignore_label = 2;
inline int UniqueLabelParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void UniqueLabelParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline float UniqueLabelParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UniqueLabelParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void UniqueLabelParameter::set_ignore_label(int index, float value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UniqueLabelParameter.ignore_label)
}
inline void UniqueLabelParameter::add_ignore_label(float value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UniqueLabelParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< float >&
UniqueLabelParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.UniqueLabelParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< float >*
UniqueLabelParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UniqueLabelParameter.ignore_label)
  return &ignore_label_;
}

// repeated float force_label = 3;
inline int UniqueLabelParameter::force_label_size() const {
  return force_label_.size();
}
inline void UniqueLabelParameter::clear_force_label() {
  force_label_.Clear();
}
inline float UniqueLabelParameter::force_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UniqueLabelParameter.force_label)
  return force_label_.Get(index);
}
inline void UniqueLabelParameter::set_force_label(int index, float value) {
  force_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UniqueLabelParameter.force_label)
}
inline void UniqueLabelParameter::add_force_label(float value) {
  force_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UniqueLabelParameter.force_label)
}
inline const ::google::protobuf::RepeatedField< float >&
UniqueLabelParameter::force_label() const {
  // @@protoc_insertion_point(field_list:caffe.UniqueLabelParameter.force_label)
  return force_label_;
}
inline ::google::protobuf::RepeatedField< float >*
UniqueLabelParameter::mutable_force_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UniqueLabelParameter.force_label)
  return &force_label_;
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena();
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
#if LANG_CXX11
inline void V0LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
#endif
inline void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena();
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
#if LANG_CXX11
inline void V0LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
#endif
inline void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::_internal_weight_filler() const {
  return *weight_filler_;
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    weight_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::_internal_bias_filler() const {
  return *bias_filler_;
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::FillerParameter>(GetArenaNoVirtual());
    bias_filler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena();
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
#if LANG_CXX11
inline void V0LayerParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
#endif
inline void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  if (!has_source()) {
    return NULL;
  }
  clear_has_source();
  return source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena();
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
#if LANG_CXX11
inline void V0LayerParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
#endif
inline void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  if (!has_meanfile()) {
    return NULL;
  }
  clear_has_meanfile();
  return meanfile_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena();
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
#if LANG_CXX11
inline void V0LayerParameter::set_det_crop_mode(::std::string&& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(
    &::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
#endif
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  if (!has_det_crop_mode()) {
    return NULL;
  }
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNonDefaultNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(&::caffe::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::_internal_hdf5_output_param() const {
  return *hdf5_output_param_;
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    auto* p = CreateMaybeMessage<::caffe::HDF5OutputParameter>(GetArenaNoVirtual());
    hdf5_output_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LayerParameter_LayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LayerParameter_LayerType>() {
  return ::caffe::LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LayerParameter_DimCheckMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LayerParameter_DimCheckMode>() {
  return ::caffe::LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SegAccuracyParameter_AccuracyMetric> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SegAccuracyParameter_AccuracyMetric>() {
  return ::caffe::SegAccuracyParameter_AccuracyMetric_descriptor();
}
template <> struct is_proto_enum< ::caffe::BiasChannelParameter_LabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BiasChannelParameter_LabelType>() {
  return ::caffe::BiasChannelParameter_LabelType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::EuclideanLossParameter_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EuclideanLossParameter_Type>() {
  return ::caffe::EuclideanLossParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::ImageDataParameter_LabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ImageDataParameter_LabelType>() {
  return ::caffe::ImageDataParameter_LabelType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_caffe_2eproto
